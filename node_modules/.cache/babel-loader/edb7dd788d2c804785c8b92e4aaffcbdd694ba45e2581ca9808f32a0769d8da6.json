{"ast":null,"code":"//moviesData.js\n\nconst extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\"; //https://www.themoviedb.org/settings/api\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=videos,credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    movie.rating = detailsData.vote_average;\n    movie.cast = detailsData.credits.cast.filter(actor => actor.known_for_department === \"Directing\" || actor.order <= 2).map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n    movie.people = movie.cast.map(actor => actor.name); // Extracting people involved\n    // Assuming reviews are available and you want to take the first review\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      // Fetching review dynamically based on movie title\n      const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n      const reviewResponse = await fetch(reviewUrl);\n      const reviewData = await reviewResponse.json();\n      if (reviewData.length > 0) {\n        movie.review = reviewData[0].review;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    }\n\n    // Search for trailer on YouTube using the movie title\n    const youtubeApiUrl = `https://www.googleapis.com/youtube/v3/search?key=${YOUR_YOUTUBE_API_KEY}&part=snippet&type=video&q=${encodeURIComponent(movie.title + \" trailer\")}`;\n    const youtubeResponse = await fetch(youtubeApiUrl);\n    const youtubeData = await youtubeResponse.json();\n    if (youtubeData.items.length > 0) {\n      // Assuming the first item is the trailer\n      const youtubeId = youtubeData.items[0].id.videoId;\n      movie.youtubeLink = `https://www.youtube.com/watch?v=${youtubeId}`;\n      movie.youtubeId = youtubeId;\n    } else {\n      console.log(`No se encontró el trailer en YouTube para la película ${movie.title}`);\n      movie.youtubeLink = null;\n      movie.youtubeId = null;\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nmovies.forEach(movie => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\nexport { moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","TMDBapiKey","getMovieDetails","movie","apiUrl","apiKey","encodeURIComponent","title","response","fetch","data","json","results","movieDetailsUrl","id","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","filter","actor","known_for_department","order","map","name","character","people","reviews","review","content","reviewUrl","reviewResponse","reviewData","youtubeApiUrl","YOUR_YOUTUBE_API_KEY","youtubeResponse","youtubeData","items","youtubeId","videoId","youtubeLink","console","log","movies","saga","category","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","push","forEach"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["//moviesData.js\n\nconst extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\"; //https://www.themoviedb.org/settings/api\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=videos,credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        movie.rating = detailsData.vote_average;\n        movie.cast = detailsData.credits.cast\n            .filter(\n                (actor) =>\n                    actor.known_for_department === \"Directing\" ||\n                    actor.order <= 2\n            )\n            .map((actor) => ({\n                name: actor.name,\n                character: actor.character,\n            }));\n        movie.people = movie.cast.map((actor) => actor.name); // Extracting people involved\n        // Assuming reviews are available and you want to take the first review\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            // Fetching review dynamically based on movie title\n            const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                movie.title\n            )}`;\n            const reviewResponse = await fetch(reviewUrl);\n            const reviewData = await reviewResponse.json();\n            if (reviewData.length > 0) {\n                movie.review = reviewData[0].review;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        }\n\n        // Search for trailer on YouTube using the movie title\n        const youtubeApiUrl = `https://www.googleapis.com/youtube/v3/search?key=${YOUR_YOUTUBE_API_KEY}&part=snippet&type=video&q=${encodeURIComponent(\n            movie.title + \" trailer\"\n        )}`;\n        const youtubeResponse = await fetch(youtubeApiUrl);\n        const youtubeData = await youtubeResponse.json();\n        if (youtubeData.items.length > 0) {\n            // Assuming the first item is the trailer\n            const youtubeId = youtubeData.items[0].id.videoId;\n            movie.youtubeLink = `https://www.youtube.com/watch?v=${youtubeId}`;\n            movie.youtubeId = youtubeId;\n        } else {\n            console.log(\n                `No se encontró el trailer en YouTube para la película ${movie.title}`\n            );\n            movie.youtubeLink = null;\n            movie.youtubeId = null;\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nmovies.forEach((movie) => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\n\nexport { moviesBySagaAndCategory };\n\nexport default movies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}