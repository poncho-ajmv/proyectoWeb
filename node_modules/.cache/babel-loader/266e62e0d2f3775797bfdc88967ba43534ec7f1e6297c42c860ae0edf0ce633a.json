{"ast":null,"code":"const apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    movie.rating = detailsData.vote_average;\n    movie.cast = detailsData.credits.cast.map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n    // Assuming reviews are available and you want to take the first review\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      // Fetching review dynamically based on movie title\n      const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n      const reviewResponse = await fetch(reviewUrl);\n      const reviewData = await reviewResponse.json();\n      if (reviewData.length > 0) {\n        movie.review = reviewData[0].review;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\n\n// Call the function to fetch movie details\nfetchMovieDetails();\nexport default movies;","map":{"version":3,"names":["apiKey","getMovieDetails","movie","apiUrl","encodeURIComponent","title","response","fetch","data","json","results","length","movieDetailsUrl","id","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","map","actor","name","character","reviews","review","content","reviewUrl","reviewResponse","reviewData","console","log","fetchMovieDetails","movies"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        movie.rating = detailsData.vote_average;\n        movie.cast = detailsData.credits.cast.map((actor) => ({\n            name: actor.name,\n            character: actor.character,\n        }));\n        // Assuming reviews are available and you want to take the first review\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            // Fetching review dynamically based on movie title\n            const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                movie.title\n            )}`;\n            const reviewResponse = await fetch(reviewUrl);\n            const reviewData = await reviewResponse.json();\n            if (reviewData.length > 0) {\n                movie.review = reviewData[0].review;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\n// Call the function to fetch movie details\nfetchMovieDetails();\n\nexport default movies;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,kCAAkC;AAEjD,MAAMC,eAAe,GAAG,MAAOC,KAAK,IAAK;EACrC,MAAMC,MAAM,GAAI,qDAAoDH,MAAO,UAASI,kBAAkB,CAClGF,KAAK,CAACG,KACV,CAAE,EAAC;EACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAAC;EACpC,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,IAAID,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IACzB,MAAMC,eAAe,GAAI,sCAAqCJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,EAAG,YAAWb,MAAO,qCAAoC;IACvI,MAAMc,eAAe,GAAG,MAAMP,KAAK,CAACK,eAAe,CAAC;IACpD,MAAMG,WAAW,GAAG,MAAMD,eAAe,CAACL,IAAI,CAAC,CAAC;IAChDP,KAAK,CAACc,MAAM,GAAI,kCAAiCR,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACO,WAAY,EAAC;IAC9Ef,KAAK,CAACgB,MAAM,GAAGH,WAAW,CAACI,YAAY;IACvCjB,KAAK,CAACkB,IAAI,GAAGL,WAAW,CAACM,OAAO,CAACD,IAAI,CAACE,GAAG,CAAEC,KAAK,KAAM;MAClDC,IAAI,EAAED,KAAK,CAACC,IAAI;MAChBC,SAAS,EAAEF,KAAK,CAACE;IACrB,CAAC,CAAC,CAAC;IACH;IACA,IAAIV,WAAW,CAACW,OAAO,IAAIX,WAAW,CAACW,OAAO,CAAChB,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/DT,KAAK,CAACyB,MAAM,GAAGZ,WAAW,CAACW,OAAO,CAAChB,OAAO,CAAC,CAAC,CAAC,CAACkB,OAAO;IACzD,CAAC,MAAM;MACH;MACA,MAAMC,SAAS,GAAI,yCAAwCzB,kBAAkB,CACzEF,KAAK,CAACG,KACV,CAAE,EAAC;MACH,MAAMyB,cAAc,GAAG,MAAMvB,KAAK,CAACsB,SAAS,CAAC;MAC7C,MAAME,UAAU,GAAG,MAAMD,cAAc,CAACrB,IAAI,CAAC,CAAC;MAC9C,IAAIsB,UAAU,CAACpB,MAAM,GAAG,CAAC,EAAE;QACvBT,KAAK,CAACyB,MAAM,GAAGI,UAAU,CAAC,CAAC,CAAC,CAACJ,MAAM;MACvC,CAAC,MAAM;QACHzB,KAAK,CAACyB,MAAM,GAAG,6BAA6B;MAChD;IACJ;EACJ,CAAC,MAAM;IACHK,OAAO,CAACC,GAAG,CACN,+CAA8C/B,KAAK,CAACG,KAAM,EAC/D,CAAC;EACL;AACJ,CAAC;AAED,MAAM6B,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAClC,KAAK,MAAMhC,KAAK,IAAIiC,MAAM,EAAE;IACxB,MAAMlC,eAAe,CAACC,KAAK,CAAC;EAChC;AACJ,CAAC;;AAED;AACAgC,iBAAiB,CAAC,CAAC;AAEnB,eAAeC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}