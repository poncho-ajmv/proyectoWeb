{"ast":null,"code":"const extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst fetchTrailerFromYouTube = async movieTitle => {\n  const apiKey = \"AIzaSyBvRzBS1OvMJRdOqatOKYVHePv_NOkxYr0\";\n  const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(movieTitle + \" trailer\" // Agregar la palabra clave \"tráiler\"\n  )}&type=video&key=${apiKey}`;\n  const response = await fetch(searchUrl);\n  const data = await response.json();\n  if (data.items && data.items.length > 0) {\n    return data.items[0].id.videoId;\n  } else {\n    return null;\n  }\n};\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.rating = detailsData.vote_average;\n    if (movie.youtubeLink) {\n      // Si se proporciona un enlace de YouTube, extraer el ID de YouTube del enlace\n      movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n    } else if (detailsData.videos && detailsData.videos.results.length > 0) {\n      // Buscar el tráiler en los videos proporcionados por la API de TMDB\n      const trailer = detailsData.videos.results.find(video => video.type === \"Trailer\");\n      if (trailer) {\n        // Si se encuentra el tráiler, extraer el ID de YouTube y construir el enlace\n        movie.youtubeId = trailer.key;\n      }\n    }\n    if (!movie.youtubeId) {\n      // Si no se encontró un tráiler en los videos proporcionados por TMDB o en el enlace proporcionado, buscar en YouTube\n      const trailerId = await fetchTrailerFromYouTube(movie.title);\n      movie.youtubeId = trailerId;\n    }\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n      const reviewResponse = await fetch(reviewUrl);\n      const reviewData = await reviewResponse.json();\n      if (reviewData.length > 0) {\n        movie.review = reviewData[0].review;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I: The Phantom Menace\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Jurassic World\",\n  youtubeLink: \"\",\n  saga: \"Jurassic Park\",\n  category: \"Adventure\"\n}, {\n  title: \"Jurassic World: Fallen Kingdom\",\n  youtubeLink: \"\",\n  saga: \"Jurassic Park\",\n  category: \"Adventure\"\n}, {\n  title: \"Jurassic World: Dominion\",\n  youtubeLink: \"\",\n  saga: \"Jurassic Park\",\n  category: \"Adventure\"\n}, {\n  title: \"Raiders of the Lost Ark\",\n  youtubeLink: \"\",\n  saga: \"Indiana Jones\",\n  category: \"Adventure\"\n}, {\n  title: \"Indiana Jones and the Temple of Doom\",\n  youtubeLink: \"\",\n  saga: \"Indiana Jones\",\n  category: \"Adventure\"\n}, {\n  title: \"Indiana Jones and the Last Crusade\",\n  youtubeLink: \"\",\n  saga: \"Indiana Jones\",\n  category: \"Adventure\"\n}, {\n  title: \"Indiana Jones and the Kingdom of the Crystal Skull\",\n  youtubeLink: \"\",\n  saga: \"Indiana Jones\",\n  category: \"Adventure\"\n}, {\n  title: \"Pirates of the Caribbean: The Curse of the Black Pearl\",\n  youtubeLink: \"\",\n  saga: \"Pirates of the Caribbean\",\n  category: \"Adventure\"\n}, {\n  title: \"Pirates of the Caribbean: Dead Man's Chest\",\n  youtubeLink: \"\",\n  saga: \"Pirates of the Caribbean\",\n  category: \"Adventure\"\n}, {\n  title: \"Pirates of the Caribbean: At World's End\",\n  youtubeLink: \"\",\n  saga: \"Pirates of the Caribbean\",\n  category: \"Adventure\"\n}, {\n  title: \"Pirates of the Caribbean: On Stranger Tides\",\n  youtubeLink: \"\",\n  saga: \"Pirates of the Caribbean\",\n  category: \"Adventure\"\n}];\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\nfetchMovieDetails();\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nexport { movies, moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","fetchTrailerFromYouTube","movieTitle","apiKey","searchUrl","encodeURIComponent","response","fetch","data","json","items","id","videoId","TMDBapiKey","getMovieDetails","movie","apiUrl","title","results","movieDetailsUrl","detailsResponse","detailsData","rating","vote_average","youtubeLink","youtubeId","videos","trailer","find","video","type","key","trailerId","reviews","review","content","reviewUrl","reviewResponse","reviewData","console","log","movies","saga","category","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","push"],"sources":["/home/poncho/toto/Repos/movie-app/src/moviesData.js"],"sourcesContent":["const extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst fetchTrailerFromYouTube = async (movieTitle) => {\n    const apiKey = \"AIzaSyBvRzBS1OvMJRdOqatOKYVHePv_NOkxYr0\";\n    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(\n        movieTitle + \" trailer\" // Agregar la palabra clave \"tráiler\"\n    )}&type=video&key=${apiKey}`;\n    const response = await fetch(searchUrl);\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n        return data.items[0].id.videoId;\n    } else {\n        return null;\n    }\n};\n\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.rating = detailsData.vote_average;\n        if (movie.youtubeLink) {\n            // Si se proporciona un enlace de YouTube, extraer el ID de YouTube del enlace\n            movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n        } else if (\n            detailsData.videos &&\n            detailsData.videos.results.length > 0\n        ) {\n            // Buscar el tráiler en los videos proporcionados por la API de TMDB\n            const trailer = detailsData.videos.results.find(\n                (video) => video.type === \"Trailer\"\n            );\n            if (trailer) {\n                // Si se encuentra el tráiler, extraer el ID de YouTube y construir el enlace\n                movie.youtubeId = trailer.key;\n            }\n        }\n        if (!movie.youtubeId) {\n            // Si no se encontró un tráiler en los videos proporcionados por TMDB o en el enlace proporcionado, buscar en YouTube\n            const trailerId = await fetchTrailerFromYouTube(movie.title);\n            movie.youtubeId = trailerId;\n        }\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                movie.title\n            )}`;\n            const reviewResponse = await fetch(reviewUrl);\n            const reviewData = await reviewResponse.json();\n            if (reviewData.length > 0) {\n                movie.review = reviewData[0].review;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I: The Phantom Menace\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n\n    {\n        title: \"Jurassic World\",\n        youtubeLink: \"\",\n        saga: \"Jurassic Park\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Jurassic World: Fallen Kingdom\",\n        youtubeLink: \"\",\n        saga: \"Jurassic Park\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Jurassic World: Dominion\",\n        youtubeLink: \"\",\n        saga: \"Jurassic Park\",\n        category: \"Adventure\",\n    },\n\n    {\n        title: \"Raiders of the Lost Ark\",\n        youtubeLink: \"\",\n        saga: \"Indiana Jones\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Indiana Jones and the Temple of Doom\",\n        youtubeLink: \"\",\n        saga: \"Indiana Jones\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Indiana Jones and the Last Crusade\",\n        youtubeLink: \"\",\n        saga: \"Indiana Jones\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Indiana Jones and the Kingdom of the Crystal Skull\",\n        youtubeLink: \"\",\n        saga: \"Indiana Jones\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Pirates of the Caribbean: The Curse of the Black Pearl\",\n        youtubeLink: \"\",\n        saga: \"Pirates of the Caribbean\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Pirates of the Caribbean: Dead Man's Chest\",\n        youtubeLink: \"\",\n        saga: \"Pirates of the Caribbean\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Pirates of the Caribbean: At World's End\",\n        youtubeLink: \"\",\n        saga: \"Pirates of the Caribbean\",\n        category: \"Adventure\",\n    },\n    {\n        title: \"Pirates of the Caribbean: On Stranger Tides\",\n        youtubeLink: \"\",\n        saga: \"Pirates of the Caribbean\",\n        category: \"Adventure\",\n    },\n];\n\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\nfetchMovieDetails();\n\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nexport { movies, moviesBySagaAndCategory };\n\nexport default movies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}