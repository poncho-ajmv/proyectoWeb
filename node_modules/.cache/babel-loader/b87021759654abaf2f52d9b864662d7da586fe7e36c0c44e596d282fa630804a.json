{"ast":null,"code":"const extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    movie.rating = detailsData.vote_average;\n    // Fetching people involved dynamically based on movie title\n    const peopleUrl = `https://api.example.com/people?title=${encodeURIComponent(movie.title)}`;\n    const peopleResponse = await fetch(peopleUrl);\n    const peopleData = await peopleResponse.json();\n    movie.people = peopleData.map(person => person.name);\n    movie.cast = detailsData.credits.cast.map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n    // Assuming reviews are available and you want to take the first review\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      movie.review = \"No hay reseñas disponibles.\";\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n  people: [\"Robert Downey Jr.\", \"Chris Hemsworth\", \"Mark Ruffalo\"],\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nmovies.forEach(movie => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\nexport { moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","apiKey","getMovieDetails","movie","apiUrl","encodeURIComponent","title","response","fetch","data","json","results","movieDetailsUrl","id","detailsResponse","detailsData","poster","poster_path","rating","vote_average","peopleUrl","peopleResponse","peopleData","people","map","person","name","cast","credits","actor","character","reviews","review","content","console","log","movies","youtubeLink","saga","category","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","push","forEach","youtubeId"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        movie.rating = detailsData.vote_average;\n        // Fetching people involved dynamically based on movie title\n        const peopleUrl = `https://api.example.com/people?title=${encodeURIComponent(\n            movie.title\n        )}`;\n        const peopleResponse = await fetch(peopleUrl);\n        const peopleData = await peopleResponse.json();\n        movie.people = peopleData.map((person) => person.name);\n        movie.cast = detailsData.credits.cast.map((actor) => ({\n            name: actor.name,\n            character: actor.character,\n        }));\n        // Assuming reviews are available and you want to take the first review\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            movie.review = \"No hay reseñas disponibles.\";\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n        people: [\"Robert Downey Jr.\", \"Chris Hemsworth\", \"Mark Ruffalo\"],\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nmovies.forEach((movie) => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\n\nexport { moviesBySagaAndCategory };\n\nexport default movies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}