{"ast":null,"code":"// moviesData.js\n\nconst fetch = require(\"node-fetch\"); // Importa node-fetch para realizar solicitudes HTTP\nconst {\n  google\n} = require(\"googleapis\"); // Importa googleapis para usar la API de YouTube\n\nconst extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\"; //https://www.themoviedb.org/settings/api\nconst youtubeApiKey = \"AIzaSyBLupWDOSCsx2RtoMUhMA2HirmJ4jjxgH4\"; // Tu clave de API de YouTube\n\nconst youtube = google.youtube({\n  version: \"v3\",\n  auth: youtubeApiKey\n});\nconst getTrailerId = async movieTitle => {\n  try {\n    const response = await youtube.search.list({\n      part: \"id\",\n      q: `${movieTitle} trailer`,\n      type: \"video\",\n      maxResults: 1\n    });\n    return response.data.items[0].id.videoId;\n  } catch (error) {\n    console.error(\"Error al buscar el tráiler en YouTube:\", error);\n    return null;\n  }\n};\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    movie.rating = detailsData.vote_average;\n    movie.cast = detailsData.credits.cast.filter(actor => actor.known_for_department === \"Directing\" || actor.order <= 2).map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n    movie.people = movie.cast.map(actor => actor.name); // Extracting people involved\n    // Assuming reviews are available and you want to take the first review\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      // Fetching review dynamically based on movie title\n      const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n      const reviewResponse = await fetch(reviewUrl);\n      const reviewData = await reviewResponse.json();\n      if (reviewData.length > 0) {\n        movie.review = reviewData[0].review;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    }\n    // Obtener el ID del tráiler de YouTube\n    const trailerId = await getTrailerId(movie.title);\n    if (trailerId) {\n      movie.youtubeId = trailerId;\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Avengers: Infinity War\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\nmodule.exports = {\n  moviesBySagaAndCategory\n};","map":{"version":3,"names":["fetch","require","google","extractYoutubeId","url","regExp","match","length","TMDBapiKey","youtubeApiKey","youtube","version","auth","getTrailerId","movieTitle","response","search","list","part","q","type","maxResults","data","items","id","videoId","error","console","getMovieDetails","movie","apiUrl","encodeURIComponent","title","json","results","movieDetailsUrl","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","filter","actor","known_for_department","order","map","name","character","people","reviews","review","content","reviewUrl","reviewResponse","reviewData","trailerId","youtubeId","log","movies","saga","category","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","push","module","exports"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["// moviesData.js\n\nconst fetch = require(\"node-fetch\"); // Importa node-fetch para realizar solicitudes HTTP\nconst { google } = require(\"googleapis\"); // Importa googleapis para usar la API de YouTube\n\nconst extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\"; //https://www.themoviedb.org/settings/api\nconst youtubeApiKey = \"AIzaSyBLupWDOSCsx2RtoMUhMA2HirmJ4jjxgH4\"; // Tu clave de API de YouTube\n\nconst youtube = google.youtube({\n    version: \"v3\",\n    auth: youtubeApiKey,\n});\n\nconst getTrailerId = async (movieTitle) => {\n    try {\n        const response = await youtube.search.list({\n            part: \"id\",\n            q: `${movieTitle} trailer`,\n            type: \"video\",\n            maxResults: 1,\n        });\n        return response.data.items[0].id.videoId;\n    } catch (error) {\n        console.error(\"Error al buscar el tráiler en YouTube:\", error);\n        return null;\n    }\n};\n\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        movie.rating = detailsData.vote_average;\n        movie.cast = detailsData.credits.cast\n            .filter(\n                (actor) =>\n                    actor.known_for_department === \"Directing\" ||\n                    actor.order <= 2\n            )\n            .map((actor) => ({\n                name: actor.name,\n                character: actor.character,\n            }));\n        movie.people = movie.cast.map((actor) => actor.name); // Extracting people involved\n        // Assuming reviews are available and you want to take the first review\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            // Fetching review dynamically based on movie title\n            const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                movie.title\n            )}`;\n            const reviewResponse = await fetch(reviewUrl);\n            const reviewData = await reviewResponse.json();\n            if (reviewData.length > 0) {\n                movie.review = reviewData[0].review;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        }\n        // Obtener el ID del tráiler de YouTube\n        const trailerId = await getTrailerId(movie.title);\n        if (trailerId) {\n            movie.youtubeId = trailerId;\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Avengers: Infinity War\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\n\nmodule.exports = { moviesBySagaAndCategory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}