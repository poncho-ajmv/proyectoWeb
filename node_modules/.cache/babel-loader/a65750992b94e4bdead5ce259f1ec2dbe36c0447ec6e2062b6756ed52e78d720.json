{"ast":null,"code":"const extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieData = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieData = data.results[0];\n    movie.poster = `https://image.tmdb.org/t/p/w500${movieData.poster_path}`;\n    movie.rating = movieData.vote_average;\n    const creditsResponse = await fetch(`https://api.themoviedb.org/3/movie/${movieData.id}/credits?api_key=${apiKey}`);\n    const creditsData = await creditsResponse.json();\n    movie.people = creditsData.cast.map(actor => actor.name);\n  } else {\n    console.log(`No se encontró información para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Obtener datos de películas desde la API de TMDb\nconst fetchMovieData = async () => {\n  for (const movie of movies) {\n    await getMovieData(movie);\n  }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nmovies.forEach(movie => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\n// Ejecutar la función para obtener los datos de películas\nfetchMovieData();\nexport { moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","apiKey","getMovieData","movie","apiUrl","encodeURIComponent","title","response","fetch","data","json","results","movieData","poster","poster_path","rating","vote_average","creditsResponse","id","creditsData","people","cast","map","actor","name","console","log","movies","youtubeLink","saga","category","fetchMovieData","moviesBySagaAndCategory","reduce","acc","push","forEach","youtubeId"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n\nconst getMovieData = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieData = data.results[0];\n        movie.poster = `https://image.tmdb.org/t/p/w500${movieData.poster_path}`;\n        movie.rating = movieData.vote_average;\n        const creditsResponse = await fetch(\n            `https://api.themoviedb.org/3/movie/${movieData.id}/credits?api_key=${apiKey}`\n        );\n        const creditsData = await creditsResponse.json();\n        movie.people = creditsData.cast.map((actor) => actor.name);\n    } else {\n        console.log(\n            `No se encontró información para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Obtener datos de películas desde la API de TMDb\nconst fetchMovieData = async () => {\n    for (const movie of movies) {\n        await getMovieData(movie);\n    }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nmovies.forEach((movie) => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\n// Ejecutar la función para obtener los datos de películas\nfetchMovieData();\n\nexport { moviesBySagaAndCategory };\n\nexport default movies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}