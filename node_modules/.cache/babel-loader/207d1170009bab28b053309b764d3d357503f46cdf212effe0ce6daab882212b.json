{"ast":null,"code":"import fetch from \"node-fetch\"; // Asegúrate de tener instalado node-fetch en tu proyecto\n\nconst extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    const directors = detailsData.credits.crew.filter(person => person.job === \"Director\").map(director => director.name);\n    const cast = detailsData.credits.cast.map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n    return {\n      directors,\n      cast\n    };\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n    return {\n      directors: [],\n      cast: []\n    };\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    const {\n      directors,\n      cast\n    } = await getMovieDetails(movie);\n    movie.directors = directors;\n    movie.cast = cast;\n  }\n};\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\nexport default movies;","map":{"version":3,"names":["fetch","extractYoutubeId","url","regExp","match","length","apiKey","getMovieDetails","movie","apiUrl","encodeURIComponent","title","response","data","json","results","movieDetailsUrl","id","detailsResponse","detailsData","directors","credits","crew","filter","person","job","map","director","name","cast","actor","character","console","log","movies","youtubeLink","saga","category","fetchMovieDetails"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["import fetch from \"node-fetch\"; // Asegúrate de tener instalado node-fetch en tu proyecto\n\nconst extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n\n        const directors = detailsData.credits.crew\n            .filter((person) => person.job === \"Director\")\n            .map((director) => director.name);\n        const cast = detailsData.credits.cast.map((actor) => ({\n            name: actor.name,\n            character: actor.character,\n        }));\n\n        return { directors, cast };\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n        return { directors: [], cast: [] };\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        const { directors, cast } = await getMovieDetails(movie);\n        movie.directors = directors;\n        movie.cast = cast;\n    }\n};\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\n\nexport default movies;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY,CAAC,CAAC;;AAEhC,MAAMC,gBAAgB,GAAIC,GAAG,IAAK;EAC9B,MAAMC,MAAM,GACR,gEAAgE;EACpE,MAAMC,KAAK,GAAGF,GAAG,CAACE,KAAK,CAACD,MAAM,CAAC;EAC/B,OAAOC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,EAAE,GAAGD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;AAC5D,CAAC;AAED,MAAME,MAAM,GAAG,kCAAkC;AAEjD,MAAMC,eAAe,GAAG,MAAOC,KAAK,IAAK;EACrC,MAAMC,MAAM,GAAI,qDAAoDH,MAAO,UAASI,kBAAkB,CAClGF,KAAK,CAACG,KACV,CAAE,EAAC;EACH,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACS,MAAM,CAAC;EACpC,MAAMI,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAElC,IAAID,IAAI,CAACE,OAAO,CAACV,MAAM,GAAG,CAAC,EAAE;IACzB,MAAMW,eAAe,GAAI,sCAAqCH,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,EAAG,YAAWX,MAAO,qCAAoC;IACvI,MAAMY,eAAe,GAAG,MAAMlB,KAAK,CAACgB,eAAe,CAAC;IACpD,MAAMG,WAAW,GAAG,MAAMD,eAAe,CAACJ,IAAI,CAAC,CAAC;IAEhD,MAAMM,SAAS,GAAGD,WAAW,CAACE,OAAO,CAACC,IAAI,CACrCC,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACC,GAAG,KAAK,UAAU,CAAC,CAC7CC,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC;IACrC,MAAMC,IAAI,GAAGV,WAAW,CAACE,OAAO,CAACQ,IAAI,CAACH,GAAG,CAAEI,KAAK,KAAM;MAClDF,IAAI,EAAEE,KAAK,CAACF,IAAI;MAChBG,SAAS,EAAED,KAAK,CAACC;IACrB,CAAC,CAAC,CAAC;IAEH,OAAO;MAAEX,SAAS;MAAES;IAAK,CAAC;EAC9B,CAAC,MAAM;IACHG,OAAO,CAACC,GAAG,CACN,+CAA8CzB,KAAK,CAACG,KAAM,EAC/D,CAAC;IACD,OAAO;MAAES,SAAS,EAAE,EAAE;MAAES,IAAI,EAAE;IAAG,CAAC;EACtC;AACJ,CAAC;AAED,MAAMK,MAAM,GAAG,CACX;EACIvB,KAAK,EAAE,qBAAqB;EAC5BwB,WAAW,EAAE,6CAA6C;EAC1DC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE;AACd,CAAC,EACD;EACI1B,KAAK,EAAE,wBAAwB;EAC/BwB,WAAW,EAAE,6CAA6C;EAC1DC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE;AACd,CAAC,CACJ;;AAED;AACA,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAClC,KAAK,MAAM9B,KAAK,IAAI0B,MAAM,EAAE;IACxB,MAAM;MAAEd,SAAS;MAAES;IAAK,CAAC,GAAG,MAAMtB,eAAe,CAACC,KAAK,CAAC;IACxDA,KAAK,CAACY,SAAS,GAAGA,SAAS;IAC3BZ,KAAK,CAACqB,IAAI,GAAGA,IAAI;EACrB;AACJ,CAAC;;AAED;AACAS,iBAAiB,CAAC,CAAC;AAEnB,eAAeJ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}