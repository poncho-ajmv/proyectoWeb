{"ast":null,"code":"// moviesData.js\n\nconst extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    movie.rating = detailsData.vote_average;\n    movie.directors = detailsData.credits.crew.filter(person => person.job === \"Director\").map(director => director.name);\n    movie.cast = detailsData.credits.cast.slice(0, 5).map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n    // Assuming reviews are available and you want to take the first review\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      // Fetching review dynamically based on movie title\n      const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n      const reviewResponse = await fetch(reviewUrl);\n      const reviewData = await reviewResponse.json();\n      if (reviewData.length > 0) {\n        movie.review = reviewData[0].review;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Obtener detalles de las películas\nexport const fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\n\n// Asignar youtubeId a cada película\nmovies.forEach(movie => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","apiKey","getMovieDetails","movie","apiUrl","encodeURIComponent","title","response","fetch","data","json","results","movieDetailsUrl","id","detailsResponse","detailsData","poster","poster_path","rating","vote_average","directors","credits","crew","filter","person","job","map","director","name","cast","slice","actor","character","reviews","review","content","reviewUrl","reviewResponse","reviewData","console","log","movies","youtubeLink","saga","category","fetchMovieDetails","forEach","youtubeId"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["// moviesData.js\n\nconst extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        movie.rating = detailsData.vote_average;\n        movie.directors = detailsData.credits.crew\n            .filter((person) => person.job === \"Director\")\n            .map((director) => director.name);\n        movie.cast = detailsData.credits.cast\n            .slice(0, 5)\n            .map((actor) => ({ name: actor.name, character: actor.character }));\n        // Assuming reviews are available and you want to take the first review\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            // Fetching review dynamically based on movie title\n            const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                movie.title\n            )}`;\n            const reviewResponse = await fetch(reviewUrl);\n            const reviewData = await reviewResponse.json();\n            if (reviewData.length > 0) {\n                movie.review = reviewData[0].review;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Obtener detalles de las películas\nexport const fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\n// Asignar youtubeId a cada película\nmovies.forEach((movie) => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\nexport default movies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}