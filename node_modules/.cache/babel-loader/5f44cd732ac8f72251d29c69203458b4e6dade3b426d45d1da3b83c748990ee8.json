{"ast":null,"code":"const API_KEY = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst fetchPoster = async title => {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(title)}`);\n    const data = await response.json();\n    if (data.results.length > 0) {\n      return `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    } else {\n      console.error(`No se encontró el poster para ${title}`);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error al obtener el poster:\", error);\n    return null;\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n  rating: \"6.5\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}\n// Agrega más películas de Star Wars y Marvel aquí\n];\n\n// Llamada a fetchPoster para obtener los posters de las películas\nconst fetchPosters = async () => {\n  for (const movie of movies) {\n    movie.poster = await fetchPoster(movie.title);\n  }\n};\nfetchPosters();\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nmovies.forEach(movie => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\nexport { moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["API_KEY","fetchPoster","title","response","fetch","encodeURIComponent","data","json","results","length","poster_path","console","error","movies","youtubeLink","people","rating","saga","category","fetchPosters","movie","poster","moviesBySagaAndCategory","reduce","acc","push","forEach","youtubeId","extractYoutubeId"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const API_KEY = \"674684d28cd5c404ad1bf06cd1a5d482\";\n\nconst fetchPoster = async (title) => {\n    try {\n        const response = await fetch(\n            `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(\n                title\n            )}`\n        );\n        const data = await response.json();\n        if (data.results.length > 0) {\n            return `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        } else {\n            console.error(`No se encontró el poster para ${title}`);\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error al obtener el poster:\", error);\n        return null;\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n        rating: \"6.5\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    // Agrega más películas de Star Wars y Marvel aquí\n];\n\n// Llamada a fetchPoster para obtener los posters de las películas\nconst fetchPosters = async () => {\n    for (const movie of movies) {\n        movie.poster = await fetchPoster(movie.title);\n    }\n};\n\nfetchPosters();\n\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nmovies.forEach((movie) => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\nexport { moviesBySagaAndCategory };\nexport default movies;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAkC;AAElD,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;EACjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACvB,qDAAoDJ,OAAQ,UAASK,kBAAkB,CACpFH,KACJ,CAAE,EACN,CAAC;IACD,MAAMI,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,IAAID,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MACzB,OAAQ,kCAAiCH,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,WAAY,EAAC;IAC1E,CAAC,MAAM;MACHC,OAAO,CAACC,KAAK,CAAE,iCAAgCV,KAAM,EAAC,CAAC;MACvD,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAI;EACf;AACJ,CAAC;AAED,MAAMC,MAAM,GAAG,CACX;EACIX,KAAK,EAAE,qBAAqB;EAC5BY,WAAW,EAAE,6CAA6C;EAC1DC,MAAM,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,iBAAiB,CAAC;EAC3DC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE;AACd;AACA;AAAA,CACH;;AAED;AACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC7B,KAAK,MAAMC,KAAK,IAAIP,MAAM,EAAE;IACxBO,KAAK,CAACC,MAAM,GAAG,MAAMpB,WAAW,CAACmB,KAAK,CAAClB,KAAK,CAAC;EACjD;AACJ,CAAC;AAEDiB,YAAY,CAAC,CAAC;AAEd,MAAMG,uBAAuB,GAAGT,MAAM,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEJ,KAAK,KAAK;EAC1D,MAAM;IAAEH,IAAI;IAAEC;EAAS,CAAC,GAAGE,KAAK;EAChC,IAAI,CAACI,GAAG,CAACP,IAAI,CAAC,EAAE;IACZO,GAAG,CAACP,IAAI,CAAC,GAAG,CAAC,CAAC;EAClB;EACA,IAAI,CAACO,GAAG,CAACP,IAAI,CAAC,CAACC,QAAQ,CAAC,EAAE;IACtBM,GAAG,CAACP,IAAI,CAAC,CAACC,QAAQ,CAAC,GAAG,EAAE;EAC5B;EACAM,GAAG,CAACP,IAAI,CAAC,CAACC,QAAQ,CAAC,CAACO,IAAI,CAACL,KAAK,CAAC;EAC/B,OAAOI,GAAG;AACd,CAAC,EAAE,CAAC,CAAC,CAAC;AAENX,MAAM,CAACa,OAAO,CAAEN,KAAK,IAAK;EACtBA,KAAK,CAACO,SAAS,GAAGC,gBAAgB,CAACR,KAAK,CAACN,WAAW,CAAC;AACzD,CAAC,CAAC;AAEF,SAASQ,uBAAuB;AAChC,eAAeT,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}