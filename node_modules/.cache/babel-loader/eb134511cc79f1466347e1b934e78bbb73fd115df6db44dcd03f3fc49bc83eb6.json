{"ast":null,"code":"const extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    movie.rating = detailsData.vote_average;\n    movie.cast = detailsData.credits.cast.filter(actor => actor.known_for_department === \"Directing\" || actor.order <= 2).map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n      const reviewResponse = await fetch(reviewUrl);\n      const reviewData = await reviewResponse.json();\n      if (reviewData.length > 0) {\n        movie.review = reviewData[0].review;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\nconst fetchAndExportMovies = async () => {\n  await fetchMovieDetails();\n  movies.forEach(movie => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n  });\n  const moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const {\n      saga,\n      category\n    } = movie;\n    if (!acc[saga]) {\n      acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n      acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n  }, {});\n  return {\n    moviesBySagaAndCategory,\n    movies\n  };\n};\nexport default fetchAndExportMovies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","apiKey","getMovieDetails","movie","apiUrl","encodeURIComponent","title","response","fetch","data","json","results","movieDetailsUrl","id","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","filter","actor","known_for_department","order","map","name","character","reviews","review","content","reviewUrl","reviewResponse","reviewData","console","log","movies","youtubeLink","saga","category","fetchMovieDetails","fetchAndExportMovies","forEach","youtubeId","moviesBySagaAndCategory","reduce","acc","push"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        movie.rating = detailsData.vote_average;\n        movie.cast = detailsData.credits.cast\n            .filter(\n                (actor) =>\n                    actor.known_for_department === \"Directing\" ||\n                    actor.order <= 2\n            )\n            .map((actor) => ({\n                name: actor.name,\n                character: actor.character,\n            }));\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                movie.title\n            )}`;\n            const reviewResponse = await fetch(reviewUrl);\n            const reviewData = await reviewResponse.json();\n            if (reviewData.length > 0) {\n                movie.review = reviewData[0].review;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\nconst fetchAndExportMovies = async () => {\n    await fetchMovieDetails();\n    movies.forEach((movie) => {\n        movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n    });\n    const moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n        const { saga, category } = movie;\n        if (!acc[saga]) {\n            acc[saga] = {};\n        }\n        if (!acc[saga][category]) {\n            acc[saga][category] = [];\n        }\n        acc[saga][category].push(movie);\n        return acc;\n    }, {});\n    return { moviesBySagaAndCategory, movies };\n};\n\nexport default fetchAndExportMovies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}