{"ast":null,"code":"const extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst fetchTrailerFromYouTube = async movieTitle => {\n  const apiKey = \"AIzaSyBLupWDOSCsx2RtoMUhMA2HirmJ4jjxgH4\";\n  const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(movieTitle + \" trailer\" // Agregar la palabra clave \"tráiler\"\n  )}&type=video&key=${apiKey}`;\n  const response = await fetch(searchUrl);\n  const data = await response.json();\n  if (data.items && data.items.length > 0) {\n    return data.items[0].id.videoId;\n  } else {\n    return null;\n  }\n};\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = detailsData.poster_path ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}` : \"URL_DEL_POSTER_ALTERNATIVO\";\n    movie.rating = detailsData.vote_average;\n    movie.cast = detailsData.credits.cast.filter(actor => actor.known_for_department === \"Directing\" || actor.order <= 2).map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n    movie.people = movie.cast.map(actor => actor.name);\n    if (detailsData.videos && detailsData.videos.results.length > 0) {\n      // Buscar el tráiler en los videos proporcionados por la API de TMDB\n      const trailer = detailsData.videos.results.find(video => video.type === \"Trailer\");\n      if (trailer) {\n        // Si se encuentra el tráiler, extraer el ID de YouTube y construir el enlace\n        movie.youtubeId = trailer.key;\n      }\n    }\n    if (!movie.youtubeId) {\n      // Si no se encontró un tráiler en los videos proporcionados por TMDB, buscar en YouTube\n      const trailerId = await fetchTrailerFromYouTube(movie.title);\n      movie.youtubeId = trailerId;\n    }\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n      const reviewResponse = await fetch(reviewUrl);\n      const reviewData = await reviewResponse.json();\n      if (reviewData.length > 0) {\n        movie.review = reviewData[0].review;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I: The Phantom Menace\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode II: Attack of the Clones\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode III: Revenge of the Sith\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode IV: A New Hope\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode V: The Empire Strikes Back\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode VI: Return of the Jedi\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars: The Force Awakens\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Iron Man\",\n  youtubeLink: \"\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}, {\n  title: \"The Dark Knight\",\n  youtubeLink: \"\",\n  saga: \"DC\",\n  category: \"Super\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Agregar el ID de YouTube a cada objeto de película\nmovies.forEach(movie => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\nfetchMovieDetails();\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nexport { movies, moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","fetchTrailerFromYouTube","movieTitle","apiKey","searchUrl","encodeURIComponent","response","fetch","data","json","items","id","videoId","TMDBapiKey","getMovieDetails","movie","apiUrl","title","results","movieDetailsUrl","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","filter","actor","known_for_department","order","map","name","character","people","videos","trailer","find","video","type","youtubeId","key","trailerId","reviews","review","content","reviewUrl","reviewResponse","reviewData","console","log","movies","youtubeLink","saga","category","forEach","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","push"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst fetchTrailerFromYouTube = async (movieTitle) => {\n    const apiKey = \"AIzaSyBLupWDOSCsx2RtoMUhMA2HirmJ4jjxgH4\";\n    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(\n        movieTitle + \" trailer\" // Agregar la palabra clave \"tráiler\"\n    )}&type=video&key=${apiKey}`;\n    const response = await fetch(searchUrl);\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n        return data.items[0].id.videoId;\n    } else {\n        return null;\n    }\n};\n\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = detailsData.poster_path\n            ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}`\n            : \"URL_DEL_POSTER_ALTERNATIVO\";\n        movie.rating = detailsData.vote_average;\n        movie.cast = detailsData.credits.cast\n            .filter(\n                (actor) =>\n                    actor.known_for_department === \"Directing\" ||\n                    actor.order <= 2\n            )\n            .map((actor) => ({\n                name: actor.name,\n                character: actor.character,\n            }));\n        movie.people = movie.cast.map((actor) => actor.name);\n        if (detailsData.videos && detailsData.videos.results.length > 0) {\n            // Buscar el tráiler en los videos proporcionados por la API de TMDB\n            const trailer = detailsData.videos.results.find(\n                (video) => video.type === \"Trailer\"\n            );\n            if (trailer) {\n                // Si se encuentra el tráiler, extraer el ID de YouTube y construir el enlace\n                movie.youtubeId = trailer.key;\n            }\n        }\n        if (!movie.youtubeId) {\n            // Si no se encontró un tráiler en los videos proporcionados por TMDB, buscar en YouTube\n            const trailerId = await fetchTrailerFromYouTube(movie.title);\n            movie.youtubeId = trailerId;\n        }\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                movie.title\n            )}`;\n            const reviewResponse = await fetch(reviewUrl);\n            const reviewData = await reviewResponse.json();\n            if (reviewData.length > 0) {\n                movie.review = reviewData[0].review;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I: The Phantom Menace\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode II: Attack of the Clones\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode III: Revenge of the Sith\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode IV: A New Hope\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode V: The Empire Strikes Back\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode VI: Return of the Jedi\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars: The Force Awakens\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Iron Man\",\n        youtubeLink: \"\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n    {\n        title: \"The Dark Knight\",\n        youtubeLink: \"\",\n        saga: \"DC\",\n        category: \"Super\",\n    },\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Agregar el ID de YouTube a cada objeto de película\nmovies.forEach((movie) => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\nfetchMovieDetails();\n\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nexport { movies, moviesBySagaAndCategory };\n\nexport default movies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}