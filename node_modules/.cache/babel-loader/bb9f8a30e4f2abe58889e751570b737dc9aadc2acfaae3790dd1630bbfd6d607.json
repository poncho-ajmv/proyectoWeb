{"ast":null,"code":"const getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    movie.rating = detailsData.vote_average;\n\n    // Fetching cast dynamically based on movie ID\n    const castUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}/credits?api_key=${apiKey}`;\n    const castResponse = await fetch(castUrl);\n    const castData = await castResponse.json();\n    movie.cast = castData.cast.map(actor => ({\n      name: actor.name,\n      character: actor.character\n    }));\n\n    // Assuming reviews are available and you want to take the first review\n    if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n      movie.review = detailsData.reviews.results[0].content;\n    } else {\n      // Fetching review dynamically based on movie title\n      const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n      const reviewResponse = await fetch(reviewUrl);\n      const reviewData = await reviewResponse.json();\n      if (reviewData.length > 0) {\n        movie.review = reviewData[0].review;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    }\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};","map":{"version":3,"names":["getMovieDetails","movie","apiUrl","apiKey","encodeURIComponent","title","response","fetch","data","json","results","length","movieDetailsUrl","id","detailsResponse","detailsData","poster","poster_path","rating","vote_average","castUrl","castResponse","castData","cast","map","actor","name","character","reviews","review","content","reviewUrl","reviewResponse","reviewData","console","log"],"sources":["/home/poncho/toto/CODE/React/proyect/src/MovieCarousel.js"],"sourcesContent":["const getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits,reviews`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        movie.rating = detailsData.vote_average;\n\n        // Fetching cast dynamically based on movie ID\n        const castUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}/credits?api_key=${apiKey}`;\n        const castResponse = await fetch(castUrl);\n        const castData = await castResponse.json();\n        movie.cast = castData.cast.map((actor) => ({\n            name: actor.name,\n            character: actor.character,\n        }));\n\n        // Assuming reviews are available and you want to take the first review\n        if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n            movie.review = detailsData.reviews.results[0].content;\n        } else {\n            // Fetching review dynamically based on movie title\n            const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                movie.title\n            )}`;\n            const reviewResponse = await fetch(reviewUrl);\n            const reviewData = await reviewResponse.json();\n            if (reviewData.length > 0) {\n                movie.review = reviewData[0].review;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        }\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAOC,KAAK,IAAK;EACrC,MAAMC,MAAM,GAAI,qDAAoDC,MAAO,UAASC,kBAAkB,CAClGH,KAAK,CAACI,KACV,CAAE,EAAC;EACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,MAAM,CAAC;EACpC,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,IAAID,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IACzB,MAAMC,eAAe,GAAI,sCAAqCJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,EAAG,YAAWV,MAAO,qCAAoC;IACvI,MAAMW,eAAe,GAAG,MAAMP,KAAK,CAACK,eAAe,CAAC;IACpD,MAAMG,WAAW,GAAG,MAAMD,eAAe,CAACL,IAAI,CAAC,CAAC;IAChDR,KAAK,CAACe,MAAM,GAAI,kCAAiCR,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACO,WAAY,EAAC;IAC9EhB,KAAK,CAACiB,MAAM,GAAGH,WAAW,CAACI,YAAY;;IAEvC;IACA,MAAMC,OAAO,GAAI,sCAAqCZ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,EAAG,oBAAmBV,MAAO,EAAC;IACpG,MAAMkB,YAAY,GAAG,MAAMd,KAAK,CAACa,OAAO,CAAC;IACzC,MAAME,QAAQ,GAAG,MAAMD,YAAY,CAACZ,IAAI,CAAC,CAAC;IAC1CR,KAAK,CAACsB,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAEC,KAAK,KAAM;MACvCC,IAAI,EAAED,KAAK,CAACC,IAAI;MAChBC,SAAS,EAAEF,KAAK,CAACE;IACrB,CAAC,CAAC,CAAC;;IAEH;IACA,IAAIZ,WAAW,CAACa,OAAO,IAAIb,WAAW,CAACa,OAAO,CAAClB,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/DV,KAAK,CAAC4B,MAAM,GAAGd,WAAW,CAACa,OAAO,CAAClB,OAAO,CAAC,CAAC,CAAC,CAACoB,OAAO;IACzD,CAAC,MAAM;MACH;MACA,MAAMC,SAAS,GAAI,yCAAwC3B,kBAAkB,CACzEH,KAAK,CAACI,KACV,CAAE,EAAC;MACH,MAAM2B,cAAc,GAAG,MAAMzB,KAAK,CAACwB,SAAS,CAAC;MAC7C,MAAME,UAAU,GAAG,MAAMD,cAAc,CAACvB,IAAI,CAAC,CAAC;MAC9C,IAAIwB,UAAU,CAACtB,MAAM,GAAG,CAAC,EAAE;QACvBV,KAAK,CAAC4B,MAAM,GAAGI,UAAU,CAAC,CAAC,CAAC,CAACJ,MAAM;MACvC,CAAC,MAAM;QACH5B,KAAK,CAAC4B,MAAM,GAAG,6BAA6B;MAChD;IACJ;EACJ,CAAC,MAAM;IACHK,OAAO,CAACC,GAAG,CACN,+CAA8ClC,KAAK,CAACI,KAAM,EAC/D,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}