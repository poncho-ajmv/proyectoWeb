{"ast":null,"code":"// moviesData.js\nconst MoviePosterDbService = require(\"MoviePosterDb\"); // Importamos la biblioteca MoviePosterDb\n\n// Creamos una instancia de MoviePosterDbService con la clave de API proporcionada\nconst moviePosterDbService = new MoviePosterDbService(\"234\", \"tS5SPZa4ikob6q5ExKK86NRdvLIqAQLWxj93bFxZ\");\n\n// Función para obtener el póster de la película utilizando MoviePosterDb\nconst fetchMoviePoster = async imdbId => {\n  try {\n    const moviePosterDbResult = await moviePosterDbService.Search(imdbId);\n    if (moviePosterDbResult.Posters.length > 0) {\n      return moviePosterDbResult.Posters[0].Url; // Devolvemos la URL del póster\n    } else {\n      console.error(\"No se encontró ningún póster para la película con IMDb ID:\", imdbId);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error al obtener el póster de la película:\", error);\n    return null;\n  }\n};\n\n// Array de películas con los IMDb IDs\nconst movies = [{\n  imdbId: \"tt1375666\",\n  // IMDb ID de \"Inception\"\n  people: []\n}, {\n  imdbId: \"tt0468569\",\n  // IMDb ID de \"The Dark Knight\"\n  people: []\n}\n// Agrega más películas con sus respectivos IMDb IDs\n];\n\n// Función para llenar los detalles de las películas\nconst fillMovieDetails = async () => {\n  for (const movie of movies) {\n    const posterUrl = await fetchMoviePoster(movie.imdbId);\n    if (posterUrl) {\n      movie.poster = posterUrl; // Asignamos la URL del póster a la película\n    }\n  }\n};\nfillMovieDetails();\nexport default movies;","map":{"version":3,"names":["MoviePosterDbService","require","moviePosterDbService","fetchMoviePoster","imdbId","moviePosterDbResult","Search","Posters","length","Url","console","error","movies","people","fillMovieDetails","movie","posterUrl","poster"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["// moviesData.js\nconst MoviePosterDbService = require(\"MoviePosterDb\"); // Importamos la biblioteca MoviePosterDb\n\n// Creamos una instancia de MoviePosterDbService con la clave de API proporcionada\nconst moviePosterDbService = new MoviePosterDbService(\n    \"234\",\n    \"tS5SPZa4ikob6q5ExKK86NRdvLIqAQLWxj93bFxZ\"\n);\n\n// Función para obtener el póster de la película utilizando MoviePosterDb\nconst fetchMoviePoster = async (imdbId) => {\n    try {\n        const moviePosterDbResult = await moviePosterDbService.Search(imdbId);\n        if (moviePosterDbResult.Posters.length > 0) {\n            return moviePosterDbResult.Posters[0].Url; // Devolvemos la URL del póster\n        } else {\n            console.error(\n                \"No se encontró ningún póster para la película con IMDb ID:\",\n                imdbId\n            );\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error al obtener el póster de la película:\", error);\n        return null;\n    }\n};\n\n// Array de películas con los IMDb IDs\nconst movies = [\n    {\n        imdbId: \"tt1375666\", // IMDb ID de \"Inception\"\n        people: [],\n    },\n    {\n        imdbId: \"tt0468569\", // IMDb ID de \"The Dark Knight\"\n        people: [],\n    },\n    // Agrega más películas con sus respectivos IMDb IDs\n];\n\n// Función para llenar los detalles de las películas\nconst fillMovieDetails = async () => {\n    for (const movie of movies) {\n        const posterUrl = await fetchMoviePoster(movie.imdbId);\n        if (posterUrl) {\n            movie.poster = posterUrl; // Asignamos la URL del póster a la película\n        }\n    }\n};\n\nfillMovieDetails();\n\nexport default movies;\n"],"mappings":"AAAA;AACA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;;AAEvD;AACA,MAAMC,oBAAoB,GAAG,IAAIF,oBAAoB,CACjD,KAAK,EACL,0CACJ,CAAC;;AAED;AACA,MAAMG,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EACvC,IAAI;IACA,MAAMC,mBAAmB,GAAG,MAAMH,oBAAoB,CAACI,MAAM,CAACF,MAAM,CAAC;IACrE,IAAIC,mBAAmB,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MACxC,OAAOH,mBAAmB,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,GAAG,CAAC,CAAC;IAC/C,CAAC,MAAM;MACHC,OAAO,CAACC,KAAK,CACT,4DAA4D,EAC5DP,MACJ,CAAC;MACD,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IAClE,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,MAAMC,MAAM,GAAG,CACX;EACIR,MAAM,EAAE,WAAW;EAAE;EACrBS,MAAM,EAAE;AACZ,CAAC,EACD;EACIT,MAAM,EAAE,WAAW;EAAE;EACrBS,MAAM,EAAE;AACZ;AACA;AAAA,CACH;;AAED;AACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACjC,KAAK,MAAMC,KAAK,IAAIH,MAAM,EAAE;IACxB,MAAMI,SAAS,GAAG,MAAMb,gBAAgB,CAACY,KAAK,CAACX,MAAM,CAAC;IACtD,IAAIY,SAAS,EAAE;MACXD,KAAK,CAACE,MAAM,GAAGD,SAAS,CAAC,CAAC;IAC9B;EACJ;AACJ,CAAC;AAEDF,gBAAgB,CAAC,CAAC;AAElB,eAAeF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}