{"ast":null,"code":"const extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst API_KEY = 'TU_CLAVE_DE_API';\nconst fetchPoster = async title => {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(title)}`);\n    const data = await response.json();\n    if (data.results.length > 0) {\n      return `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    } else {\n      console.error(`No se encontró el poster para ${title}`);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error al obtener el poster:', error);\n    return null;\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n  rating: \"6.5\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}\n// Agrega más películas de Star Wars y Marvel aquí\n];\n\n// Llamada a fetchPoster para obtener los posters de las películas\nconst fetchPosters = async () => {\n  for (const movie of movies) {\n    movie.poster = await fetchPoster(movie.title);\n  }\n};\nfetchPosters();\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nmovies.forEach(movie => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\nexport { moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","API_KEY","fetchPoster","title","response","fetch","encodeURIComponent","data","json","results","poster_path","console","error","movies","youtubeLink","people","rating","saga","category","fetchPosters","movie","poster","moviesBySagaAndCategory","reduce","acc","push","forEach","youtubeId"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\nconst API_KEY = 'TU_CLAVE_DE_API';\n\nconst fetchPoster = async (title) => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(title)}`\n    );\n    const data = await response.json();\n    if (data.results.length > 0) {\n      return `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    } else {\n      console.error(`No se encontró el poster para ${title}`);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error al obtener el poster:', error);\n    return null;\n  }\n};\n\nconst movies = [\n  {\n    title: \"Star Wars Episode I\",\n    youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n    people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n    rating: \"6.5\",\n    saga: \"Star Wars\",\n    category: \"Science Fiction\"\n  },\n  // Agrega más películas de Star Wars y Marvel aquí\n];\n\n// Llamada a fetchPoster para obtener los posters de las películas\nconst fetchPosters = async () => {\n  for (const movie of movies) {\n    movie.poster = await fetchPoster(movie.title);\n  }\n};\n\nfetchPosters();\n\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const { saga, category } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\n\nmovies.forEach((movie) => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\nexport { moviesBySagaAndCategory };\nexport default movies;"],"mappings":"AAAA,MAAMA,gBAAgB,GAAIC,GAAG,IAAK;EAC9B,MAAMC,MAAM,GACR,gEAAgE;EACpE,MAAMC,KAAK,GAAGF,GAAG,CAACE,KAAK,CAACD,MAAM,CAAC;EAC/B,OAAOC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,EAAE,GAAGD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;AAC5D,CAAC;AACD,MAAME,OAAO,GAAG,iBAAiB;AAEjC,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,qDAAoDJ,OAAQ,UAASK,kBAAkB,CAACH,KAAK,CAAE,EAClG,CAAC;IACD,MAAMI,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,IAAID,IAAI,CAACE,OAAO,CAACT,MAAM,GAAG,CAAC,EAAE;MAC3B,OAAQ,kCAAiCO,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,WAAY,EAAC;IACxE,CAAC,MAAM;MACLC,OAAO,CAACC,KAAK,CAAE,iCAAgCT,KAAM,EAAC,CAAC;MACvD,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMC,MAAM,GAAG,CACb;EACEV,KAAK,EAAE,qBAAqB;EAC5BW,WAAW,EAAE,6CAA6C;EAC1DC,MAAM,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,iBAAiB,CAAC;EAC3DC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE;AACZ;AACA;AAAA,CACD;;AAED;AACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,KAAK,MAAMC,KAAK,IAAIP,MAAM,EAAE;IAC1BO,KAAK,CAACC,MAAM,GAAG,MAAMnB,WAAW,CAACkB,KAAK,CAACjB,KAAK,CAAC;EAC/C;AACF,CAAC;AAEDgB,YAAY,CAAC,CAAC;AAEd,MAAMG,uBAAuB,GAAGT,MAAM,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEJ,KAAK,KAAK;EAC5D,MAAM;IAAEH,IAAI;IAAEC;EAAS,CAAC,GAAGE,KAAK;EAChC,IAAI,CAACI,GAAG,CAACP,IAAI,CAAC,EAAE;IACdO,GAAG,CAACP,IAAI,CAAC,GAAG,CAAC,CAAC;EAChB;EACA,IAAI,CAACO,GAAG,CAACP,IAAI,CAAC,CAACC,QAAQ,CAAC,EAAE;IACxBM,GAAG,CAACP,IAAI,CAAC,CAACC,QAAQ,CAAC,GAAG,EAAE;EAC1B;EACAM,GAAG,CAACP,IAAI,CAAC,CAACC,QAAQ,CAAC,CAACO,IAAI,CAACL,KAAK,CAAC;EAC/B,OAAOI,GAAG;AACZ,CAAC,EAAE,CAAC,CAAC,CAAC;AAENX,MAAM,CAACa,OAAO,CAAEN,KAAK,IAAK;EACxBA,KAAK,CAACO,SAAS,GAAG/B,gBAAgB,CAACwB,KAAK,CAACN,WAAW,CAAC;AACvD,CAAC,CAAC;AAEF,SAASQ,uBAAuB;AAChC,eAAeT,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}