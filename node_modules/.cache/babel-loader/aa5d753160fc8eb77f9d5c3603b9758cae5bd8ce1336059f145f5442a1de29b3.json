{"ast":null,"code":"const API_KEY = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n  rating: \"6.5\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n  people: [\"Robert Downey Jr.\", \"Chris Hemsworth\", \"Mark Ruffalo\"],\n  rating: \"8.4\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Función para obtener el póster de una película\nconst getMoviePoster = async movie => {\n  const youtubeId = extractYoutubeId(movie.youtubeLink);\n  if (!youtubeId) return null;\n  const response = await fetch(`https://api.themoviedb.org/3/find/${youtubeId}?api_key=${API_KEY}&external_source=imdb_id`);\n  const data = await response.json();\n  if (data && data.movie_results && data.movie_results.length > 0) {\n    const posterPath = data.movie_results[0].poster_path;\n    if (posterPath) {\n      movie.poster = `https://image.tmdb.org/t/p/w500${posterPath}`;\n    }\n  }\n};\n\n// Función para obtener los pósters de todas las películas\nconst getMoviesPosters = async () => {\n  for (const movie of movies) {\n    await getMoviePoster(movie);\n  }\n};\n\n// Llamar a la función para obtener los pósters de todas las películas\ngetMoviesPosters().then(() => {\n  // Agrupar películas por saga y categoría\n  const moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const {\n      saga,\n      category\n    } = movie;\n    if (!acc[saga]) {\n      acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n      acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n  }, {});\n  movies.forEach(movie => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n  });\n  console.log(moviesBySagaAndCategory);\n});","map":{"version":3,"names":["API_KEY","extractYoutubeId","url","regExp","match","length","movies","title","youtubeLink","people","rating","saga","category","getMoviePoster","movie","youtubeId","response","fetch","data","json","movie_results","posterPath","poster_path","poster","getMoviesPosters","then","moviesBySagaAndCategory","reduce","acc","push","forEach","console","log"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const API_KEY = \"674684d28cd5c404ad1bf06cd1a5d482\";\n\nconst extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n        rating: \"6.5\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n        people: [\"Robert Downey Jr.\", \"Chris Hemsworth\", \"Mark Ruffalo\"],\n        rating: \"8.4\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Función para obtener el póster de una película\nconst getMoviePoster = async (movie) => {\n    const youtubeId = extractYoutubeId(movie.youtubeLink);\n    if (!youtubeId) return null;\n\n    const response = await fetch(\n        `https://api.themoviedb.org/3/find/${youtubeId}?api_key=${API_KEY}&external_source=imdb_id`\n    );\n    const data = await response.json();\n\n    if (data && data.movie_results && data.movie_results.length > 0) {\n        const posterPath = data.movie_results[0].poster_path;\n        if (posterPath) {\n            movie.poster = `https://image.tmdb.org/t/p/w500${posterPath}`;\n        }\n    }\n};\n\n// Función para obtener los pósters de todas las películas\nconst getMoviesPosters = async () => {\n    for (const movie of movies) {\n        await getMoviePoster(movie);\n    }\n};\n\n// Llamar a la función para obtener los pósters de todas las películas\ngetMoviesPosters().then(() => {\n    // Agrupar películas por saga y categoría\n    const moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n        const { saga, category } = movie;\n        if (!acc[saga]) {\n            acc[saga] = {};\n        }\n        if (!acc[saga][category]) {\n            acc[saga][category] = [];\n        }\n        acc[saga][category].push(movie);\n        return acc;\n    }, {});\n\n    movies.forEach((movie) => {\n        movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n    });\n\n    console.log(moviesBySagaAndCategory);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAkC;AAElD,MAAMC,gBAAgB,GAAIC,GAAG,IAAK;EAC9B,MAAMC,MAAM,GACR,gEAAgE;EACpE,MAAMC,KAAK,GAAGF,GAAG,CAACE,KAAK,CAACD,MAAM,CAAC;EAC/B,OAAOC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,EAAE,GAAGD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;AAC5D,CAAC;AAED,MAAME,MAAM,GAAG,CACX;EACIC,KAAK,EAAE,qBAAqB;EAC5BC,WAAW,EAAE,6CAA6C;EAC1DC,MAAM,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,iBAAiB,CAAC;EAC3DC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE;AACd,CAAC,EAED;EACIL,KAAK,EAAE,wBAAwB;EAC/BC,WAAW,EAAE,6CAA6C;EAC1DC,MAAM,EAAE,CAAC,mBAAmB,EAAE,iBAAiB,EAAE,cAAc,CAAC;EAChEC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE;AACd,CAAC,CACJ;;AAED;AACA,MAAMC,cAAc,GAAG,MAAOC,KAAK,IAAK;EACpC,MAAMC,SAAS,GAAGd,gBAAgB,CAACa,KAAK,CAACN,WAAW,CAAC;EACrD,IAAI,CAACO,SAAS,EAAE,OAAO,IAAI;EAE3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACvB,qCAAoCF,SAAU,YAAWf,OAAQ,0BACtE,CAAC;EACD,MAAMkB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,aAAa,IAAIF,IAAI,CAACE,aAAa,CAACf,MAAM,GAAG,CAAC,EAAE;IAC7D,MAAMgB,UAAU,GAAGH,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC,CAACE,WAAW;IACpD,IAAID,UAAU,EAAE;MACZP,KAAK,CAACS,MAAM,GAAI,kCAAiCF,UAAW,EAAC;IACjE;EACJ;AACJ,CAAC;;AAED;AACA,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACjC,KAAK,MAAMV,KAAK,IAAIR,MAAM,EAAE;IACxB,MAAMO,cAAc,CAACC,KAAK,CAAC;EAC/B;AACJ,CAAC;;AAED;AACAU,gBAAgB,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;EAC1B;EACA,MAAMC,uBAAuB,GAAGpB,MAAM,CAACqB,MAAM,CAAC,CAACC,GAAG,EAAEd,KAAK,KAAK;IAC1D,MAAM;MAAEH,IAAI;MAAEC;IAAS,CAAC,GAAGE,KAAK;IAChC,IAAI,CAACc,GAAG,CAACjB,IAAI,CAAC,EAAE;MACZiB,GAAG,CAACjB,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB;IACA,IAAI,CAACiB,GAAG,CAACjB,IAAI,CAAC,CAACC,QAAQ,CAAC,EAAE;MACtBgB,GAAG,CAACjB,IAAI,CAAC,CAACC,QAAQ,CAAC,GAAG,EAAE;IAC5B;IACAgB,GAAG,CAACjB,IAAI,CAAC,CAACC,QAAQ,CAAC,CAACiB,IAAI,CAACf,KAAK,CAAC;IAC/B,OAAOc,GAAG;EACd,CAAC,EAAE,CAAC,CAAC,CAAC;EAENtB,MAAM,CAACwB,OAAO,CAAEhB,KAAK,IAAK;IACtBA,KAAK,CAACC,SAAS,GAAGd,gBAAgB,CAACa,KAAK,CAACN,WAAW,CAAC;EACzD,CAAC,CAAC;EAEFuB,OAAO,CAACC,GAAG,CAACN,uBAAuB,CAAC;AACxC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}