{"ast":null,"code":"var _jsxFileName = \"/home/poncho/toto/CODE/React/proyectotooo/proyectoWeb/src/moviesData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { movies } from \"./moviesData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieCard = () => {\n  _s();\n  const [randomMovies, setRandomMovies] = useState([]);\n  useEffect(() => {\n    generateRandomMovies();\n  }, []);\n  const generateRandomMovies = async () => {\n    const randomIndexes = [];\n    while (randomIndexes.length < 5) {\n      const randomIndex = Math.floor(Math.random() * movies.length);\n      if (!randomIndexes.includes(randomIndex)) {\n        randomIndexes.push(randomIndex);\n      }\n    }\n    const randomMoviesList = [];\n    for (const index of randomIndexes) {\n      const movie = movies[index];\n      const movieDetails = await getMovieDetails(movie);\n      randomMoviesList.push(movieDetails);\n    }\n    setRandomMovies(randomMoviesList);\n  };\n  const getMovieDetails = async movie => {\n    // Verificar si ya tenemos los detalles de la película en caché\n    if (movie.details) {\n      return movie.details;\n    }\n    const TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(movie.title)}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n      const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n      const detailsResponse = await fetch(movieDetailsUrl);\n      const detailsData = await detailsResponse.json();\n      movie.poster = detailsData.poster_path ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}` : \"URL_DEL_POSTER_ALTERNATIVO\";\n      movie.rating = detailsData.vote_average;\n      movie.cast = detailsData.credits.cast.filter(actor => actor.known_for_department === \"Directing\" || actor.order <= 2).map(actor => ({\n        name: actor.name,\n        character: actor.character\n      }));\n      movie.people = movie.cast.map(actor => actor.name);\n      if (movie.youtubeLink) {\n        movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n      } else if (detailsData.videos && detailsData.videos.results.length > 0) {\n        const trailer = detailsData.videos.results.find(video => video.type === \"Trailer\");\n        if (trailer) {\n          movie.youtubeId = trailer.key;\n        }\n      }\n      if (!movie.youtubeId) {\n        const trailerId = await fetchTrailerFromYouTube(movie.title);\n        movie.youtubeId = trailerId;\n      }\n      if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n        movie.review = detailsData.reviews.results[0].content;\n      } else {\n        const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n        const reviewResponse = await fetch(reviewUrl);\n        const reviewData = await reviewResponse.json();\n        if (reviewData.length > 0) {\n          movie.review = reviewData[0].review;\n        } else {\n          movie.review = \"No hay reseñas disponibles.\";\n        }\n      }\n      // Guardar los detalles de la película en caché\n      movie.details = {\n        title: movie.title,\n        poster: movie.poster,\n        rating: movie.rating,\n        youtubeId: movie.youtubeId,\n        review: movie.review\n      };\n      return movie.details;\n    } else {\n      console.log(`No se encontraron detalles para la película ${movie.title}`);\n      return null;\n    }\n  };\n  const extractYoutubeId = url => {\n    const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n  };\n  const fetchTrailerFromYouTube = async movieTitle => {\n    const apiKey = \"AIzaSyBLupWD0SCsx2RtoMUhMA2HirmJ4jjxgH4\";\n    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(movieTitle + \" trailer\")}&type=video&key=${apiKey}`;\n    const response = await fetch(searchUrl);\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n      return data.items[0].id.videoId;\n    } else {\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-card-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Random Movie Posters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-card-list\",\n      children: randomMovies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.poster,\n          alt: movie.title,\n          className: \"movie-poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n_s(MovieCard, \"QewMyE1AR3vt//Ky2asHEZqo2SI=\");\n_c = MovieCard;\nexport default MovieCard;\nvar _c;\n$RefreshReg$(_c, \"MovieCard\");","map":{"version":3,"names":["React","useState","useEffect","movies","jsxDEV","_jsxDEV","MovieCard","_s","randomMovies","setRandomMovies","generateRandomMovies","randomIndexes","length","randomIndex","Math","floor","random","includes","push","randomMoviesList","index","movie","movieDetails","getMovieDetails","details","TMDBapiKey","apiUrl","encodeURIComponent","title","response","fetch","data","json","results","movieDetailsUrl","id","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","filter","actor","known_for_department","order","map","name","character","people","youtubeLink","youtubeId","extractYoutubeId","videos","trailer","find","video","type","key","trailerId","fetchTrailerFromYouTube","reviews","review","content","reviewUrl","reviewResponse","reviewData","console","log","url","regExp","match","movieTitle","apiKey","searchUrl","items","videoId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/home/poncho/toto/CODE/React/proyectotooo/proyectoWeb/src/moviesData.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { movies } from \"./moviesData\";\n\nconst MovieCard = () => {\n    const [randomMovies, setRandomMovies] = useState([]);\n\n    useEffect(() => {\n        generateRandomMovies();\n    }, []);\n\n    const generateRandomMovies = async () => {\n        const randomIndexes = [];\n        while (randomIndexes.length < 5) {\n            const randomIndex = Math.floor(Math.random() * movies.length);\n            if (!randomIndexes.includes(randomIndex)) {\n                randomIndexes.push(randomIndex);\n            }\n        }\n        const randomMoviesList = [];\n        for (const index of randomIndexes) {\n            const movie = movies[index];\n            const movieDetails = await getMovieDetails(movie);\n            randomMoviesList.push(movieDetails);\n        }\n        setRandomMovies(randomMoviesList);\n    };\n\n    const getMovieDetails = async (movie) => {\n        // Verificar si ya tenemos los detalles de la película en caché\n        if (movie.details) {\n            return movie.details;\n        }\n        const TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n        const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(\n            movie.title\n        )}`;\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        if (data.results.length > 0) {\n            const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n            const detailsResponse = await fetch(movieDetailsUrl);\n            const detailsData = await detailsResponse.json();\n            movie.poster = detailsData.poster_path\n                ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}`\n                : \"URL_DEL_POSTER_ALTERNATIVO\";\n            movie.rating = detailsData.vote_average;\n            movie.cast = detailsData.credits.cast\n                .filter(\n                    (actor) =>\n                        actor.known_for_department === \"Directing\" ||\n                        actor.order <= 2\n                )\n                .map((actor) => ({\n                    name: actor.name,\n                    character: actor.character,\n                }));\n            movie.people = movie.cast.map((actor) => actor.name);\n            if (movie.youtubeLink) {\n                movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n            } else if (\n                detailsData.videos &&\n                detailsData.videos.results.length > 0\n            ) {\n                const trailer = detailsData.videos.results.find(\n                    (video) => video.type === \"Trailer\"\n                );\n                if (trailer) {\n                    movie.youtubeId = trailer.key;\n                }\n            }\n            if (!movie.youtubeId) {\n                const trailerId = await fetchTrailerFromYouTube(movie.title);\n                movie.youtubeId = trailerId;\n            }\n            if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n                movie.review = detailsData.reviews.results[0].content;\n            } else {\n                const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                    movie.title\n                )}`;\n                const reviewResponse = await fetch(reviewUrl);\n                const reviewData = await reviewResponse.json();\n                if (reviewData.length > 0) {\n                    movie.review = reviewData[0].review;\n                } else {\n                    movie.review = \"No hay reseñas disponibles.\";\n                }\n            }\n            // Guardar los detalles de la película en caché\n            movie.details = {\n                title: movie.title,\n                poster: movie.poster,\n                rating: movie.rating,\n                youtubeId: movie.youtubeId,\n                review: movie.review,\n            };\n            return movie.details;\n        } else {\n            console.log(\n                `No se encontraron detalles para la película ${movie.title}`\n            );\n            return null;\n        }\n    };\n\n    const extractYoutubeId = (url) => {\n        const regExp =\n            /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        const match = url.match(regExp);\n        return match && match[1].length === 11 ? match[1] : null;\n    };\n\n    const fetchTrailerFromYouTube = async (movieTitle) => {\n        const apiKey = \"AIzaSyBLupWD0SCsx2RtoMUhMA2HirmJ4jjxgH4\";\n        const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(\n            movieTitle + \" trailer\"\n        )}&type=video&key=${apiKey}`;\n        const response = await fetch(searchUrl);\n        const data = await response.json();\n        if (data.items && data.items.length > 0) {\n            return data.items[0].id.videoId;\n        } else {\n            return null;\n        }\n    };\n\n    return (\n        <div className=\"movie-card-container\">\n            <h2>Random Movie Posters</h2>\n            <div className=\"movie-card-list\">\n                {randomMovies.map((movie, index) => (\n                    <div key={index} className=\"movie-card\">\n                        <img\n                            src={movie.poster}\n                            alt={movie.title}\n                            className=\"movie-poster\"\n                        />\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MovieCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}