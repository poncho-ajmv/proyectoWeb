{"ast":null,"code":"// moviesData.js\nconst MoviePosterDbService = require('MoviePosterDb');\nconst moviePosterDbService = new MoviePosterDbService(\"234\", \"tS5SPZa4ikob6q5ExKK86NRdvLIqAQLWxj93bFxZ\");\nconst fetchMovieDetails = async imdbId => {\n  try {\n    const moviePosterDbResult = moviePosterDbService.Search(imdbId);\n    if (moviePosterDbResult.Posters.length > 0) {\n      const posterUrl = moviePosterDbResult.Posters[0].Url;\n      const title = moviePosterDbResult.Title;\n      return {\n        poster: posterUrl,\n        title: title\n      };\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching movie details:\", error);\n    return null;\n  }\n};\nconst movies = [{\n  imdbId: \"tt1375666\",\n  // Ejemplo de ID de IMDb (Inception)\n  people: []\n}, {\n  imdbId: \"tt0068646\",\n  // Ejemplo de ID de IMDb (The Godfather)\n  people: []\n}\n// Agrega más películas con sus respectivos IDs de IMDb\n];\nconst fillMovieDetails = async () => {\n  for (const movie of movies) {\n    const movieDetails = await fetchMovieDetails(movie.imdbId);\n    if (movieDetails) {\n      movie.title = movieDetails.title;\n      movie.poster = movieDetails.poster;\n    }\n  }\n};\nfillMovieDetails();\nexport default movies;","map":{"version":3,"names":["MoviePosterDbService","require","moviePosterDbService","fetchMovieDetails","imdbId","moviePosterDbResult","Search","Posters","length","posterUrl","Url","title","Title","poster","error","console","movies","people","fillMovieDetails","movie","movieDetails"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["// moviesData.js\nconst MoviePosterDbService = require('MoviePosterDb');\n\nconst moviePosterDbService = new MoviePosterDbService(\"234\", \"tS5SPZa4ikob6q5ExKK86NRdvLIqAQLWxj93bFxZ\");\n\nconst fetchMovieDetails = async (imdbId) => {\n  try {\n    const moviePosterDbResult = moviePosterDbService.Search(imdbId);\n    if (moviePosterDbResult.Posters.length > 0) {\n      const posterUrl = moviePosterDbResult.Posters[0].Url;\n      const title = moviePosterDbResult.Title;\n      return { poster: posterUrl, title: title };\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching movie details:\", error);\n    return null;\n  }\n};\n\nconst movies = [\n  {\n    imdbId: \"tt1375666\", // Ejemplo de ID de IMDb (Inception)\n    people: [],\n  },\n  {\n    imdbId: \"tt0068646\", // Ejemplo de ID de IMDb (The Godfather)\n    people: [],\n  },\n  // Agrega más películas con sus respectivos IDs de IMDb\n];\n\nconst fillMovieDetails = async () => {\n  for (const movie of movies) {\n    const movieDetails = await fetchMovieDetails(movie.imdbId);\n    if (movieDetails) {\n      movie.title = movieDetails.title;\n      movie.poster = movieDetails.poster;\n    }\n  }\n};\n\nfillMovieDetails();\n\nexport default movies;\n"],"mappings":"AAAA;AACA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,eAAe,CAAC;AAErD,MAAMC,oBAAoB,GAAG,IAAIF,oBAAoB,CAAC,KAAK,EAAE,0CAA0C,CAAC;AAExG,MAAMG,iBAAiB,GAAG,MAAOC,MAAM,IAAK;EAC1C,IAAI;IACF,MAAMC,mBAAmB,GAAGH,oBAAoB,CAACI,MAAM,CAACF,MAAM,CAAC;IAC/D,IAAIC,mBAAmB,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC1C,MAAMC,SAAS,GAAGJ,mBAAmB,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,GAAG;MACpD,MAAMC,KAAK,GAAGN,mBAAmB,CAACO,KAAK;MACvC,OAAO;QAAEC,MAAM,EAAEJ,SAAS;QAAEE,KAAK,EAAEA;MAAM,CAAC;IAC5C,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAME,MAAM,GAAG,CACb;EACEZ,MAAM,EAAE,WAAW;EAAE;EACrBa,MAAM,EAAE;AACV,CAAC,EACD;EACEb,MAAM,EAAE,WAAW;EAAE;EACrBa,MAAM,EAAE;AACV;AACA;AAAA,CACD;AAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,KAAK,MAAMC,KAAK,IAAIH,MAAM,EAAE;IAC1B,MAAMI,YAAY,GAAG,MAAMjB,iBAAiB,CAACgB,KAAK,CAACf,MAAM,CAAC;IAC1D,IAAIgB,YAAY,EAAE;MAChBD,KAAK,CAACR,KAAK,GAAGS,YAAY,CAACT,KAAK;MAChCQ,KAAK,CAACN,MAAM,GAAGO,YAAY,CAACP,MAAM;IACpC;EACF;AACF,CAAC;AAEDK,gBAAgB,CAAC,CAAC;AAElB,eAAeF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}