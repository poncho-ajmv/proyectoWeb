{"ast":null,"code":"// moviesData.js\nconst MoviePosterDbService = require('movieposterdb');\nconst moviePosterDbService = new MoviePosterDbService(\"YOUR_API_KEY\", \"YOUR_API_SECRET\");\nconst fetchMoviePoster = async imdbId => {\n  try {\n    const moviePosterDbResult = await moviePosterDbService.Search(imdbId);\n    if (moviePosterDbResult && moviePosterDbResult.Posters.length > 0) {\n      return moviePosterDbResult.Posters[0].Url;\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching movie poster:\", error);\n    return null;\n  }\n};\nconst movies = [{\n  imdbId: \"tt1375666\",\n  // Ejemplo de ID de película en IMDb (Inception)\n  people: []\n}, {\n  imdbId: \"tt0068646\",\n  // Ejemplo de ID de película en IMDb (The Godfather)\n  people: []\n}\n// Agrega más películas con sus respectivos IDs de IMDb\n];\nconst fillMovieDetails = async () => {\n  for (const movie of movies) {\n    const moviePoster = await fetchMoviePoster(movie.imdbId);\n    if (moviePoster) {\n      movie.poster = moviePoster;\n      // Puedes obtener más información, como el título de la película, desde la respuesta de la API de MoviePosterDB\n    }\n  }\n};\nfillMovieDetails();\nexport default movies;","map":{"version":3,"names":["MoviePosterDbService","require","moviePosterDbService","fetchMoviePoster","imdbId","moviePosterDbResult","Search","Posters","length","Url","error","console","movies","people","fillMovieDetails","movie","moviePoster","poster"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["// moviesData.js\nconst MoviePosterDbService = require('movieposterdb');\nconst moviePosterDbService = new MoviePosterDbService(\"YOUR_API_KEY\", \"YOUR_API_SECRET\");\n\nconst fetchMoviePoster = async (imdbId) => {\n    try {\n        const moviePosterDbResult = await moviePosterDbService.Search(imdbId);\n        if (moviePosterDbResult && moviePosterDbResult.Posters.length > 0) {\n            return moviePosterDbResult.Posters[0].Url;\n        } else {\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error fetching movie poster:\", error);\n        return null;\n    }\n};\n\nconst movies = [\n    {\n        imdbId: \"tt1375666\", // Ejemplo de ID de película en IMDb (Inception)\n        people: [],\n    },\n    {\n        imdbId: \"tt0068646\", // Ejemplo de ID de película en IMDb (The Godfather)\n        people: [],\n    },\n    // Agrega más películas con sus respectivos IDs de IMDb\n];\n\nconst fillMovieDetails = async () => {\n    for (const movie of movies) {\n        const moviePoster = await fetchMoviePoster(movie.imdbId);\n        if (moviePoster) {\n            movie.poster = moviePoster;\n            // Puedes obtener más información, como el título de la película, desde la respuesta de la API de MoviePosterDB\n        }\n    }\n};\n\nfillMovieDetails();\n\nexport default movies;\n"],"mappings":"AAAA;AACA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,eAAe,CAAC;AACrD,MAAMC,oBAAoB,GAAG,IAAIF,oBAAoB,CAAC,cAAc,EAAE,iBAAiB,CAAC;AAExF,MAAMG,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EACvC,IAAI;IACA,MAAMC,mBAAmB,GAAG,MAAMH,oBAAoB,CAACI,MAAM,CAACF,MAAM,CAAC;IACrE,IAAIC,mBAAmB,IAAIA,mBAAmB,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/D,OAAOH,mBAAmB,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,GAAG;IAC7C,CAAC,MAAM;MACH,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACf;AACJ,CAAC;AAED,MAAME,MAAM,GAAG,CACX;EACIR,MAAM,EAAE,WAAW;EAAE;EACrBS,MAAM,EAAE;AACZ,CAAC,EACD;EACIT,MAAM,EAAE,WAAW;EAAE;EACrBS,MAAM,EAAE;AACZ;AACA;AAAA,CACH;AAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACjC,KAAK,MAAMC,KAAK,IAAIH,MAAM,EAAE;IACxB,MAAMI,WAAW,GAAG,MAAMb,gBAAgB,CAACY,KAAK,CAACX,MAAM,CAAC;IACxD,IAAIY,WAAW,EAAE;MACbD,KAAK,CAACE,MAAM,GAAGD,WAAW;MAC1B;IACJ;EACJ;AACJ,CAAC;AAEDF,gBAAgB,CAAC,CAAC;AAElB,eAAeF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}