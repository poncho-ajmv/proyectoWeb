{"ast":null,"code":"import fetch from 'node-fetch'; // Asegúrate de tener instalado 'node-fetch'\n\nconst extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst fetchTrailerFromYouTube = async movieTitle => {\n  const apiKey = \"AIzaSyBvRzBS1OvMJRdOqatOKYVHePv_NOkxYr0\"; // Aquí deberías proporcionar tu propia clave de API de YouTube\n  const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(movieTitle + \" trailer\")}&type=video&key=${apiKey}`;\n  try {\n    const response = await fetch(searchUrl);\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n      return data.items[0].id.videoId;\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching YouTube trailer:\", error);\n    return null;\n  }\n};\nconst getMovieDetails = async movie => {\n  const TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(movie.title)}`;\n  try {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n      const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n      const detailsResponse = await fetch(movieDetailsUrl);\n      const detailsData = await detailsResponse.json();\n      movie.poster = detailsData.poster_path ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}` : \"URL_DEL_POSTER_ALTERNATIVO\";\n      movie.rating = detailsData.vote_average;\n      movie.cast = detailsData.credits.cast.filter(actor => actor.known_for_department === \"Directing\" || actor.order <= 2).map(actor => ({\n        name: actor.name,\n        character: actor.character\n      }));\n      movie.people = movie.cast.map(actor => actor.name);\n      const trailer = detailsData.videos.results.find(video => video.type === \"Trailer\");\n      if (trailer) {\n        movie.youtubeId = trailer.key;\n      } else {\n        movie.youtubeId = await fetchTrailerFromYouTube(movie.title);\n      }\n      if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n        movie.review = detailsData.reviews.results[0].content;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    } else {\n      console.log(`No se encontraron detalles para la película ${movie.title}`);\n    }\n  } catch (error) {\n    console.error(\"Error fetching movie details:\", error);\n  }\n};\nconst movies = [\n  // Lista de películas...\n];\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\nfetchMovieDetails();\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nexport { movies, moviesBySagaAndCategory };","map":{"version":3,"names":["fetch","extractYoutubeId","url","regExp","match","length","fetchTrailerFromYouTube","movieTitle","apiKey","searchUrl","encodeURIComponent","response","data","json","items","id","videoId","error","console","getMovieDetails","movie","TMDBapiKey","apiUrl","title","results","movieDetailsUrl","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","filter","actor","known_for_department","order","map","name","character","people","trailer","videos","find","video","type","youtubeId","key","reviews","review","content","log","movies","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","saga","category","push"],"sources":["/home/poncho/toto/CODE/React/proyectotooo/proyectoWeb/src/moviesData.js"],"sourcesContent":["import fetch from 'node-fetch'; // Asegúrate de tener instalado 'node-fetch'\n\nconst extractYoutubeId = (url) => {\n    const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst fetchTrailerFromYouTube = async (movieTitle) => {\n    const apiKey = \"AIzaSyBvRzBS1OvMJRdOqatOKYVHePv_NOkxYr0\"; // Aquí deberías proporcionar tu propia clave de API de YouTube\n    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(\n        movieTitle + \" trailer\"\n    )}&type=video&key=${apiKey}`;\n    try {\n        const response = await fetch(searchUrl);\n        const data = await response.json();\n        if (data.items && data.items.length > 0) {\n            return data.items[0].id.videoId;\n        } else {\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error fetching YouTube trailer:\", error);\n        return null;\n    }\n};\n\nconst getMovieDetails = async (movie) => {\n    const TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        if (data.results.length > 0) {\n            const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n            const detailsResponse = await fetch(movieDetailsUrl);\n            const detailsData = await detailsResponse.json();\n            movie.poster = detailsData.poster_path\n                ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}`\n                : \"URL_DEL_POSTER_ALTERNATIVO\";\n            movie.rating = detailsData.vote_average;\n            movie.cast = detailsData.credits.cast\n                .filter(\n                    (actor) =>\n                        actor.known_for_department === \"Directing\" ||\n                        actor.order <= 2\n                )\n                .map((actor) => ({\n                    name: actor.name,\n                    character: actor.character,\n                }));\n            movie.people = movie.cast.map((actor) => actor.name);\n            const trailer = detailsData.videos.results.find(\n                (video) => video.type === \"Trailer\"\n            );\n            if (trailer) {\n                movie.youtubeId = trailer.key;\n            } else {\n                movie.youtubeId = await fetchTrailerFromYouTube(movie.title);\n            }\n            if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n                movie.review = detailsData.reviews.results[0].content;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        } else {\n            console.log(`No se encontraron detalles para la película ${movie.title}`);\n        }\n    } catch (error) {\n        console.error(\"Error fetching movie details:\", error);\n    }\n};\n\nconst movies = [\n    // Lista de películas...\n];\n\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\nfetchMovieDetails();\n\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nexport { movies, moviesBySagaAndCategory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}