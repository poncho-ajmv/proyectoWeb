{"ast":null,"code":"const fetch = require('node-fetch');\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst YouTubeapiKey = \"TU_CLAVE_DE_API_DE_YOUTUBE\"; // Reemplazar con tu clave de API de YouTube\n\nconst extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst fetchTrailerFromYouTube = async movieTitle => {\n  try {\n    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(movieTitle + \" trailer\")}&type=video&key=${YouTubeapiKey}`;\n    const response = await fetch(searchUrl);\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n      return data.items[0].id.videoId;\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error al buscar tráiler en YouTube:\", error);\n    return null;\n  }\n};\nconst getMovieDetails = async movie => {\n  try {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(movie.title)}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n      const movieId = data.results[0].id;\n      const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n      const detailsResponse = await fetch(movieDetailsUrl);\n      const detailsData = await detailsResponse.json();\n      movie.poster = detailsData.poster_path ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}` : \"URL_DEL_POSTER_ALTERNATIVO\";\n      movie.rating = detailsData.vote_average;\n      movie.cast = detailsData.credits.cast.filter(actor => actor.known_for_department === \"Directing\" || actor.order <= 2).map(actor => ({\n        name: actor.name,\n        character: actor.character\n      }));\n      movie.people = movie.cast.map(actor => actor.name);\n      if (movie.youtubeLink) {\n        movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n      } else if (detailsData.videos && detailsData.videos.results.length > 0) {\n        const trailer = detailsData.videos.results.find(video => video.type === \"Trailer\");\n        if (trailer) {\n          movie.youtubeId = trailer.key;\n        }\n      }\n      if (!movie.youtubeId) {\n        movie.youtubeId = await fetchTrailerFromYouTube(movie.title);\n      }\n      if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n        movie.review = detailsData.reviews.results[0].content;\n      } else {\n        movie.review = \"No hay reseñas disponibles.\";\n      }\n    } else {\n      console.log(`No se encontraron detalles para la película ${movie.title}`);\n    }\n  } catch (error) {\n    console.error(\"Error al obtener detalles de la película:\", error);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I: The Phantom Menace\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode II: Attack of the Clones\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode III: Revenge of the Sith\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode IV: A New Hope\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"The Hangover\",\n  youtubeLink: \"\",\n  saga: \"Comedy\",\n  category: \"Comedy\"\n}];\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\nfetchMovieDetails();\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  acc[saga] = acc[saga] || {};\n  acc[saga][category] = acc[saga][category] || [];\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nmodule.exports = {\n  movies,\n  moviesBySagaAndCategory\n};","map":{"version":3,"names":["fetch","require","TMDBapiKey","YouTubeapiKey","extractYoutubeId","url","regExp","match","length","fetchTrailerFromYouTube","movieTitle","searchUrl","encodeURIComponent","response","data","json","items","id","videoId","error","console","getMovieDetails","movie","apiUrl","title","results","movieId","movieDetailsUrl","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","filter","actor","known_for_department","order","map","name","character","people","youtubeLink","youtubeId","videos","trailer","find","video","type","key","reviews","review","content","log","movies","saga","category","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","push","module","exports"],"sources":["/home/poncho/toto/CODE/React/proyectotooo/proyectoWeb/src/moviesData.js"],"sourcesContent":["const fetch = require('node-fetch');\n\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst YouTubeapiKey = \"TU_CLAVE_DE_API_DE_YOUTUBE\"; // Reemplazar con tu clave de API de YouTube\n\nconst extractYoutubeId = (url) => {\n    const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst fetchTrailerFromYouTube = async (movieTitle) => {\n    try {\n        const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(movieTitle + \" trailer\")}&type=video&key=${YouTubeapiKey}`;\n        const response = await fetch(searchUrl);\n        const data = await response.json();\n        if (data.items && data.items.length > 0) {\n            return data.items[0].id.videoId;\n        } else {\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error al buscar tráiler en YouTube:\", error);\n        return null;\n    }\n};\n\nconst getMovieDetails = async (movie) => {\n    try {\n        const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDBapiKey}&query=${encodeURIComponent(movie.title)}`;\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        if (data.results.length > 0) {\n            const movieId = data.results[0].id;\n            const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${TMDBapiKey}&append_to_response=videos,credits,reviews`;\n            const detailsResponse = await fetch(movieDetailsUrl);\n            const detailsData = await detailsResponse.json();\n            movie.poster = detailsData.poster_path ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}` : \"URL_DEL_POSTER_ALTERNATIVO\";\n            movie.rating = detailsData.vote_average;\n            movie.cast = detailsData.credits.cast.filter((actor) => actor.known_for_department === \"Directing\" || actor.order <= 2)\n                .map((actor) => ({ name: actor.name, character: actor.character }));\n            movie.people = movie.cast.map((actor) => actor.name);\n            if (movie.youtubeLink) {\n                movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n            } else if (detailsData.videos && detailsData.videos.results.length > 0) {\n                const trailer = detailsData.videos.results.find((video) => video.type === \"Trailer\");\n                if (trailer) {\n                    movie.youtubeId = trailer.key;\n                }\n            }\n            if (!movie.youtubeId) {\n                movie.youtubeId = await fetchTrailerFromYouTube(movie.title);\n            }\n            if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n                movie.review = detailsData.reviews.results[0].content;\n            } else {\n                movie.review = \"No hay reseñas disponibles.\";\n            }\n        } else {\n            console.log(`No se encontraron detalles para la película ${movie.title}`);\n        }\n    } catch (error) {\n        console.error(\"Error al obtener detalles de la película:\", error);\n    }\n};\n\nconst movies = [\n    { title: \"Star Wars Episode I: The Phantom Menace\", youtubeLink: \"\", saga: \"Star Wars\", category: \"Science Fiction\" },\n    { title: \"Star Wars Episode II: Attack of the Clones\", youtubeLink: \"\", saga: \"Star Wars\", category: \"Science Fiction\" },\n    { title: \"Star Wars Episode III: Revenge of the Sith\", youtubeLink: \"\", saga: \"Star Wars\", category: \"Science Fiction\" },\n    { title: \"Star Wars Episode IV: A New Hope\", youtubeLink: \"\", saga: \"Star Wars\", category: \"Science Fiction\" },\n    { title: \"The Hangover\", youtubeLink: \"\", saga: \"Comedy\", category: \"Comedy\" },\n];\n\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\nfetchMovieDetails();\n\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    acc[saga] = acc[saga] || {};\n    acc[saga][category] = acc[saga][category] || [];\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nmodule.exports = { movies, moviesBySagaAndCategory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}