{"ast":null,"code":"const extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async movie => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  if (data.results.length > 0) {\n    const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits`;\n    const detailsResponse = await fetch(movieDetailsUrl);\n    const detailsData = await detailsResponse.json();\n    movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n    movie.rating = detailsData.vote_average;\n    movie.cast = detailsData.credits.cast.map(actor => actor.name);\n  } else {\n    console.log(`No se encontraron detalles para la película ${movie.title}`);\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I\",\n  youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n  people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n  rating: \"6.5\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode II\",\n  youtubeLink: \"https://www.youtube.com/watch?v=gYbW1F_c9eM\",\n  people: [\"Hayden Christensen\", \"Natalie Portman\", \"Samuel L. Jackson\"],\n  rating: \"6.6\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode III\",\n  youtubeLink: \"https://www.youtube.com/watch?v=5UnjrG_N8hU\",\n  people: [\"Ewan McGregor\", \"Natalie Portman\", \"Hayden Christensen\"],\n  rating: \"7.5\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode IV\",\n  youtubeLink: \"https://www.youtube.com/watch?v=1g3_CFmnU7k\",\n  people: [\"Mark Hamill\", \"Harrison Ford\", \"Carrie Fisher\"],\n  rating: \"8.6\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode V\",\n  youtubeLink: \"https://www.youtube.com/watch?v=JNwNXF9Y6kY\",\n  people: [\"Mark Hamill\", \"Harrison Ford\", \"Carrie Fisher\"],\n  rating: \"8.7\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars Episode VI\",\n  youtubeLink: \"https://www.youtube.com/watch?v=5UfA_aKBGMc\",\n  people: [\"Mark Hamill\", \"Harrison Ford\", \"Carrie Fisher\"],\n  rating: \"8.3\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Star Wars: The Force Awakens\",\n  youtubeLink: \"https://www.youtube.com/watch?v=sGbxmsDFVnE\",\n  people: [\"Daisy Ridley\", \"John Boyega\", \"Adam Driver\"],\n  rating: \"7.9\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"Iron Man\",\n  youtubeLink: \"https://www.youtube.com/watch?v=8ugaeA-nMTc\",\n  people: [\"Robert Downey Jr.\", \"Gwyneth Paltrow\", \"Jeff Bridges\"],\n  rating: \"7.9\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}, {\n  title: \"Avengers: Infinity War\",\n  youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n  people: [\"Robert Downey Jr.\", \"Chris Hemsworth\", \"Mark Ruffalo\"],\n  rating: \"8.4\",\n  saga: \"Marvel\",\n  category: \"Super\"\n}];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nmovies.forEach(movie => {\n  movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\nexport { moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","apiKey","getMovieDetails","movie","apiUrl","encodeURIComponent","title","response","fetch","data","json","results","movieDetailsUrl","id","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","map","actor","name","console","log","movies","youtubeLink","people","saga","category","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","push","forEach","youtubeId"],"sources":["/home/poncho/toto/CODE/React/proyect/src/moviesData.js"],"sourcesContent":["const extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst apiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\n\nconst getMovieDetails = async (movie) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n        const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=credits`;\n        const detailsResponse = await fetch(movieDetailsUrl);\n        const detailsData = await detailsResponse.json();\n        movie.poster = `https://image.tmdb.org/t/p/w500${data.results[0].poster_path}`;\n        movie.rating = detailsData.vote_average;\n        movie.cast = detailsData.credits.cast.map((actor) => actor.name);\n    } else {\n        console.log(\n            `No se encontraron detalles para la película ${movie.title}`\n        );\n    }\n};\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I\",\n        youtubeLink: \"https://www.youtube.com/watch?v=bD7bpG-zDJQ\",\n        people: [\"Liam Neeson\", \"Ewan McGregor\", \"Natalie Portman\"],\n        rating: \"6.5\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode II\",\n        youtubeLink: \"https://www.youtube.com/watch?v=gYbW1F_c9eM\",\n        people: [\"Hayden Christensen\", \"Natalie Portman\", \"Samuel L. Jackson\"],\n        rating: \"6.6\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode III\",\n        youtubeLink: \"https://www.youtube.com/watch?v=5UnjrG_N8hU\",\n        people: [\"Ewan McGregor\", \"Natalie Portman\", \"Hayden Christensen\"],\n        rating: \"7.5\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode IV\",\n        youtubeLink: \"https://www.youtube.com/watch?v=1g3_CFmnU7k\",\n        people: [\"Mark Hamill\", \"Harrison Ford\", \"Carrie Fisher\"],\n        rating: \"8.6\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode V\",\n        youtubeLink: \"https://www.youtube.com/watch?v=JNwNXF9Y6kY\",\n        people: [\"Mark Hamill\", \"Harrison Ford\", \"Carrie Fisher\"],\n        rating: \"8.7\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars Episode VI\",\n        youtubeLink: \"https://www.youtube.com/watch?v=5UfA_aKBGMc\",\n        people: [\"Mark Hamill\", \"Harrison Ford\", \"Carrie Fisher\"],\n        rating: \"8.3\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Star Wars: The Force Awakens\",\n        youtubeLink: \"https://www.youtube.com/watch?v=sGbxmsDFVnE\",\n        people: [\"Daisy Ridley\", \"John Boyega\", \"Adam Driver\"],\n        rating: \"7.9\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n    {\n        title: \"Iron Man\",\n\n        youtubeLink: \"https://www.youtube.com/watch?v=8ugaeA-nMTc\",\n        people: [\"Robert Downey Jr.\", \"Gwyneth Paltrow\", \"Jeff Bridges\"],\n        rating: \"7.9\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n\n    {\n        title: \"Avengers: Infinity War\",\n        youtubeLink: \"https://www.youtube.com/watch?v=6ZfuNTqbHE8\",\n        people: [\"Robert Downey Jr.\", \"Chris Hemsworth\", \"Mark Ruffalo\"],\n        rating: \"8.4\",\n        saga: \"Marvel\",\n        category: \"Super\",\n    },\n];\n\n// Obtener detalles de las películas\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\n// Agrupar películas por saga y categoría\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nmovies.forEach((movie) => {\n    movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n});\n\n// Ejecutar la función para obtener los detalles de las películas\nfetchMovieDetails();\n\nexport { moviesBySagaAndCategory };\n\nexport default movies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}