{"ast":null,"code":"const extractYoutubeId = url => {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[1].length === 11 ? match[1] : null;\n};\nconst fetchTrailerFromYouTube = async movieTitle => {\n  const apiKey = \"AIzaSyBLupWD0SCsx2RtoMUhMA2HirmJ4jjxgH4\";\n  const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(movieTitle + \" trailer\" // Agregar la palabra clave \"tráiler\"\n  )}&type=video&key=${apiKey}`;\n  const response = await fetch(searchUrl);\n  const data = await response.json();\n  if (data.items && data.items.length > 0) {\n    return data.items[0].id.videoId;\n  } else {\n    return null;\n  }\n};\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async (movie, apiKey) => {\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(movie.title)}`;\n  try {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    if (data.results.length > 0) {\n      const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=videos,credits,reviews`;\n      const detailsResponse = await fetch(movieDetailsUrl);\n      const detailsData = await detailsResponse.json();\n      movie.poster = detailsData.poster_path ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}` : \"URL_DEL_POSTER_ALTERNATIVO\";\n      movie.rating = detailsData.vote_average;\n      movie.cast = detailsData.credits.cast.filter(actor => actor.known_for_department === \"Directing\" || actor.order <= 2).map(actor => ({\n        name: actor.name,\n        character: actor.character\n      }));\n      movie.people = movie.cast.map(actor => actor.name);\n      if (movie.youtubeLink) {\n        // Si se proporciona un enlace de YouTube, extraer el ID de YouTube del enlace\n        movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n      } else if (detailsData.videos && detailsData.videos.results.length > 0) {\n        // Buscar el tráiler en los videos proporcionados por la API de TMDB\n        const trailer = detailsData.videos.results.find(video => video.type === \"Trailer\");\n        if (trailer) {\n          // Si se encuentra el tráiler, extraer el ID de YouTube y construir el enlace\n          movie.youtubeId = trailer.key;\n        }\n      }\n      if (!movie.youtubeId) {\n        // Si no se encontró un tráiler en los videos proporcionados por TMDB o en el enlace proporcionado, buscar en YouTube\n        const trailerId = await fetchTrailerFromYouTube(movie.title);\n        movie.youtubeId = trailerId;\n      }\n      if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n        movie.review = detailsData.reviews.results[0].content;\n      } else {\n        const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(movie.title)}`;\n        const reviewResponse = await fetch(reviewUrl);\n        const reviewData = await reviewResponse.json();\n        if (reviewData.length > 0) {\n          movie.review = reviewData[0].review;\n        } else {\n          movie.review = \"No hay reseñas disponibles.\";\n        }\n      }\n    } else {\n      console.log(`No se encontraron detalles para la película ${movie.title}`);\n      // Aquí podrías manejar el caso de que no se encuentren detalles para la película, como asignar valores predeterminados o mostrar un mensaje de error.\n    }\n  } catch (error) {\n    console.error(`Error al obtener detalles para la película ${movie.title}:`, error);\n    // Aquí podrías manejar el error, como asignar valores predeterminados o mostrar un mensaje de error.\n  }\n};\nconst movies = [{\n  title: \"Star Wars Episode I: The Phantom Menace\",\n  youtubeLink: \"\",\n  saga: \"Star Wars\",\n  category: \"Science Fiction\"\n}, {\n  title: \"The Hangover\",\n  youtubeLink: \"\",\n  saga: \"Comedy\",\n  category: \"Comedy\"\n}];\nconst fetchMovieDetails = async () => {\n  for (const movie of movies) {\n    await getMovieDetails(movie);\n  }\n};\nfetchMovieDetails();\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n  const {\n    saga,\n    category\n  } = movie;\n  if (!acc[saga]) {\n    acc[saga] = {};\n  }\n  if (!acc[saga][category]) {\n    acc[saga][category] = [];\n  }\n  acc[saga][category].push(movie);\n  return acc;\n}, {});\nexport { movies, moviesBySagaAndCategory };\nexport default movies;","map":{"version":3,"names":["extractYoutubeId","url","regExp","match","length","fetchTrailerFromYouTube","movieTitle","apiKey","searchUrl","encodeURIComponent","response","fetch","data","json","items","id","videoId","TMDBapiKey","getMovieDetails","movie","apiUrl","title","results","movieDetailsUrl","detailsResponse","detailsData","poster","poster_path","rating","vote_average","cast","credits","filter","actor","known_for_department","order","map","name","character","people","youtubeLink","youtubeId","videos","trailer","find","video","type","key","trailerId","reviews","review","content","reviewUrl","reviewResponse","reviewData","console","log","error","movies","saga","category","fetchMovieDetails","moviesBySagaAndCategory","reduce","acc","push"],"sources":["/home/poncho/toto/CODE/React/proyectotooo/proyectoWeb/src/moviesData.js"],"sourcesContent":["const extractYoutubeId = (url) => {\n    const regExp =\n        /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[1].length === 11 ? match[1] : null;\n};\n\nconst fetchTrailerFromYouTube = async (movieTitle) => {\n    const apiKey = \"AIzaSyBLupWD0SCsx2RtoMUhMA2HirmJ4jjxgH4\";\n    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(\n        movieTitle + \" trailer\" // Agregar la palabra clave \"tráiler\"\n    )}&type=video&key=${apiKey}`;\n    const response = await fetch(searchUrl);\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n        return data.items[0].id.videoId;\n    } else {\n        return null;\n    }\n};\n\nconst TMDBapiKey = \"674684d28cd5c404ad1bf06cd1a5d482\";\nconst getMovieDetails = async (movie, apiKey) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(\n        movie.title\n    )}`;\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        if (data.results.length > 0) {\n            const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${data.results[0].id}?api_key=${apiKey}&append_to_response=videos,credits,reviews`;\n            const detailsResponse = await fetch(movieDetailsUrl);\n            const detailsData = await detailsResponse.json();\n            movie.poster = detailsData.poster_path\n                ? `https://image.tmdb.org/t/p/w500${detailsData.poster_path}`\n                : \"URL_DEL_POSTER_ALTERNATIVO\";\n            movie.rating = detailsData.vote_average;\n            movie.cast = detailsData.credits.cast\n                .filter(\n                    (actor) =>\n                        actor.known_for_department === \"Directing\" ||\n                        actor.order <= 2\n                )\n                .map((actor) => ({\n                    name: actor.name,\n                    character: actor.character,\n                }));\n            movie.people = movie.cast.map((actor) => actor.name);\n            if (movie.youtubeLink) {\n                // Si se proporciona un enlace de YouTube, extraer el ID de YouTube del enlace\n                movie.youtubeId = extractYoutubeId(movie.youtubeLink);\n            } else if (\n                detailsData.videos &&\n                detailsData.videos.results.length > 0\n            ) {\n                // Buscar el tráiler en los videos proporcionados por la API de TMDB\n                const trailer = detailsData.videos.results.find(\n                    (video) => video.type === \"Trailer\"\n                );\n                if (trailer) {\n                    // Si se encuentra el tráiler, extraer el ID de YouTube y construir el enlace\n                    movie.youtubeId = trailer.key;\n                }\n            }\n            if (!movie.youtubeId) {\n                // Si no se encontró un tráiler en los videos proporcionados por TMDB o en el enlace proporcionado, buscar en YouTube\n                const trailerId = await fetchTrailerFromYouTube(movie.title);\n                movie.youtubeId = trailerId;\n            }\n            if (detailsData.reviews && detailsData.reviews.results.length > 0) {\n                movie.review = detailsData.reviews.results[0].content;\n            } else {\n                const reviewUrl = `https://api.example.com/reviews?title=${encodeURIComponent(\n                    movie.title\n                )}`;\n                const reviewResponse = await fetch(reviewUrl);\n                const reviewData = await reviewResponse.json();\n                if (reviewData.length > 0) {\n                    movie.review = reviewData[0].review;\n                } else {\n                    movie.review = \"No hay reseñas disponibles.\";\n                }\n            }\n        } else {\n            console.log(\n                `No se encontraron detalles para la película ${movie.title}`\n            );\n            // Aquí podrías manejar el caso de que no se encuentren detalles para la película, como asignar valores predeterminados o mostrar un mensaje de error.\n        }\n    } catch (error) {\n        console.error(`Error al obtener detalles para la película ${movie.title}:`, error);\n        // Aquí podrías manejar el error, como asignar valores predeterminados o mostrar un mensaje de error.\n    }\n};\n\n\nconst movies = [\n    {\n        title: \"Star Wars Episode I: The Phantom Menace\",\n        youtubeLink: \"\",\n        saga: \"Star Wars\",\n        category: \"Science Fiction\",\n    },\n\n\n    {\n        title: \"The Hangover\",\n        youtubeLink: \"\",\n        saga: \"Comedy\",\n        category: \"Comedy\",\n    },\n];\n\nconst fetchMovieDetails = async () => {\n    for (const movie of movies) {\n        await getMovieDetails(movie);\n    }\n};\n\nfetchMovieDetails();\n\nconst moviesBySagaAndCategory = movies.reduce((acc, movie) => {\n    const { saga, category } = movie;\n    if (!acc[saga]) {\n        acc[saga] = {};\n    }\n    if (!acc[saga][category]) {\n        acc[saga][category] = [];\n    }\n    acc[saga][category].push(movie);\n    return acc;\n}, {});\n\nexport { movies, moviesBySagaAndCategory };\n\nexport default movies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}